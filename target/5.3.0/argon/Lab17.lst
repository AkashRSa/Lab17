
c:/Users/Akash/IoTCamp2023/Lab17/target/5.3.0/argon/Lab17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000239c  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b63b8  000b63b8  000063b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e610  000b63dc  0000e610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000174  2003e67c  2003e67c  0001e67c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6448  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b644c  000b644c  0001644c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6452  000b6452  00016452  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6476  000b6476  00016476  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00103b93  00000000  00000000  0001647a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001024a  00000000  00000000  0011a00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00039960  00000000  00000000  0012a257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002a08  00000000  00000000  00163bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a620  00000000  00000000  001665bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000345c7  00000000  00000000  00170bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003757c  00000000  00000000  001a51a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013890c  00000000  00000000  001dc722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000796c  00000000  00000000  00315030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f001 ff1d 	bl	b5e90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f001 ff25 	bl	b5eac <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e610 	.word	0x2003e610
   b406c:	000b63dc 	.word	0x000b63dc
   b4070:	2003e67c 	.word	0x2003e67c
   b4074:	2003e67c 	.word	0x2003e67c
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f001 f859 	bl	b5138 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b6394 	.word	0x000b6394
   b40a0:	000b63b8 	.word	0x000b63b8

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b85c 	b.w	b4160 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f879 	bl	b41a0 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f000 bff9 	b.w	b50a8 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 be01 	b.w	b4cbc <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bdff 	b.w	b4cbc <malloc>

000b40be <_ZdaPv>:
   b40be:	f000 be05 	b.w	b4ccc <free>

000b40c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40c2:	f000 be03 	b.w	b4ccc <free>

000b40c6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c6:	7800      	ldrb	r0, [r0, #0]
   b40c8:	fab0 f080 	clz	r0, r0
   b40cc:	0940      	lsrs	r0, r0, #5
   b40ce:	4770      	bx	lr

000b40d0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40d0:	2301      	movs	r3, #1
   b40d2:	7003      	strb	r3, [r0, #0]
   b40d4:	4770      	bx	lr

000b40d6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d6:	b40e      	push	{r1, r2, r3}
   b40d8:	b503      	push	{r0, r1, lr}
   b40da:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40dc:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40de:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40e4:	f000 ff5f 	bl	b4fa6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40e8:	b002      	add	sp, #8
   b40ea:	f85d eb04 	ldr.w	lr, [sp], #4
   b40ee:	b003      	add	sp, #12
   b40f0:	4770      	bx	lr
	...

000b40f4 <_Z8callbackPcPhj>:
    client.subscribe("Lab17/east");
  }
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b40f4:	b5b0      	push	{r4, r5, r7, lr}
  char p[length + 1];
   b40f6:	f102 0308 	add.w	r3, r2, #8
   b40fa:	f023 0307 	bic.w	r3, r3, #7
{
   b40fe:	af00      	add	r7, sp, #0
  char p[length + 1];
   b4100:	ebad 0d03 	sub.w	sp, sp, r3
{
   b4104:	4615      	mov	r5, r2
   b4106:	4604      	mov	r4, r0
  memcpy(p, payload, length);
   b4108:	4668      	mov	r0, sp
   b410a:	f001 fec1 	bl	b5e90 <memcpy>
  p[length] = NULL;
   b410e:	2300      	movs	r3, #0
   b4110:	f80d 3005 	strb.w	r3, [sp, r5]
  Serial.printf("%s", p);
   b4114:	f001 f92e 	bl	b5374 <_Z16_fetch_usbserialv>
   b4118:	490c      	ldr	r1, [pc, #48]	; (b414c <_Z8callbackPcPhj+0x58>)
   b411a:	466a      	mov	r2, sp
   b411c:	f7ff ffdb 	bl	b40d6 <_ZN5Print6printfEPKcz>

  if (strcmp(topic, "Lab17/north") == 0) {
   b4120:	490b      	ldr	r1, [pc, #44]	; (b4150 <_Z8callbackPcPhj+0x5c>)
   b4122:	4620      	mov	r0, r4
   b4124:	f7ff ff7a 	bl	b401c <strcmp>
   b4128:	b930      	cbnz	r0, b4138 <_Z8callbackPcPhj+0x44>
    Serial.println("north");
   b412a:	f001 f923 	bl	b5374 <_Z16_fetch_usbserialv>
   b412e:	4909      	ldr	r1, [pc, #36]	; (b4154 <_Z8callbackPcPhj+0x60>)
  }
  else if (strcmp(topic, "Lab17/east") == 0) {
    Serial.println("east");
   b4130:	f000 ff11 	bl	b4f56 <_ZN5Print7printlnEPKc>
  }
  
   b4134:	46bd      	mov	sp, r7
   b4136:	bdb0      	pop	{r4, r5, r7, pc}
  else if (strcmp(topic, "Lab17/east") == 0) {
   b4138:	4907      	ldr	r1, [pc, #28]	; (b4158 <_Z8callbackPcPhj+0x64>)
   b413a:	4620      	mov	r0, r4
   b413c:	f7ff ff6e 	bl	b401c <strcmp>
   b4140:	2800      	cmp	r0, #0
   b4142:	d1f7      	bne.n	b4134 <_Z8callbackPcPhj+0x40>
    Serial.println("east");
   b4144:	f001 f916 	bl	b5374 <_Z16_fetch_usbserialv>
   b4148:	4904      	ldr	r1, [pc, #16]	; (b415c <_Z8callbackPcPhj+0x68>)
   b414a:	e7f1      	b.n	b4130 <_Z8callbackPcPhj+0x3c>
   b414c:	000b6008 	.word	0x000b6008
   b4150:	000b600b 	.word	0x000b600b
   b4154:	000b6011 	.word	0x000b6011
   b4158:	000b6017 	.word	0x000b6017
   b415c:	000b601d 	.word	0x000b601d

000b4160 <setup>:
{
   b4160:	b510      	push	{r4, lr}
  client.subscribe("Lab17/north");
   b4162:	4c0b      	ldr	r4, [pc, #44]	; (b4190 <setup+0x30>)
  Serial.begin(9600);
   b4164:	f001 f906 	bl	b5374 <_Z16_fetch_usbserialv>
   b4168:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b416c:	f001 f8f6 	bl	b535c <_ZN9USBSerial5beginEl>
  client.subscribe("Lab17/north");
   b4170:	4908      	ldr	r1, [pc, #32]	; (b4194 <setup+0x34>)
   b4172:	4620      	mov	r0, r4
   b4174:	f000 fc02 	bl	b497c <_ZN4MQTT9subscribeEPKc>
  client.subscribe("Lab17/east");
   b4178:	4907      	ldr	r1, [pc, #28]	; (b4198 <setup+0x38>)
   b417a:	4620      	mov	r0, r4
   b417c:	f000 fbfe 	bl	b497c <_ZN4MQTT9subscribeEPKc>
  Serial.println("works?");
   b4180:	f001 f8f8 	bl	b5374 <_Z16_fetch_usbserialv>
}
   b4184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println("works?");
   b4188:	4904      	ldr	r1, [pc, #16]	; (b419c <setup+0x3c>)
   b418a:	f000 bee4 	b.w	b4f56 <_ZN5Print7printlnEPKc>
   b418e:	bf00      	nop
   b4190:	2003e67c 	.word	0x2003e67c
   b4194:	000b600b 	.word	0x000b600b
   b4198:	000b6017 	.word	0x000b6017
   b419c:	000b6022 	.word	0x000b6022

000b41a0 <loop>:
{
   b41a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (client.isConnected())
   b41a2:	480f      	ldr	r0, [pc, #60]	; (b41e0 <loop+0x40>)
   b41a4:	f000 f95a 	bl	b445c <_ZN4MQTT11isConnectedEv>
   b41a8:	b128      	cbz	r0, b41b6 <loop+0x16>
    client.loop();
   b41aa:	480d      	ldr	r0, [pc, #52]	; (b41e0 <loop+0x40>)
}
   b41ac:	b005      	add	sp, #20
   b41ae:	f85d eb04 	ldr.w	lr, [sp], #4
    client.loop();
   b41b2:	f000 ba9b 	b.w	b46ec <_ZN4MQTT4loopEv>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b41b6:	4668      	mov	r0, sp
   b41b8:	f000 fd70 	bl	b4c9c <spark_deviceID>
    client.connect(System.deviceID());
   b41bc:	9900      	ldr	r1, [sp, #0]
   b41be:	4808      	ldr	r0, [pc, #32]	; (b41e0 <loop+0x40>)
   b41c0:	f000 fa3c 	bl	b463c <_ZN4MQTT7connectEPKc>
   b41c4:	4668      	mov	r0, sp
   b41c6:	f000 fe01 	bl	b4dcc <_ZN6StringD1Ev>
    client.subscribe("Lab17/north");
   b41ca:	4906      	ldr	r1, [pc, #24]	; (b41e4 <loop+0x44>)
   b41cc:	4804      	ldr	r0, [pc, #16]	; (b41e0 <loop+0x40>)
   b41ce:	f000 fbd5 	bl	b497c <_ZN4MQTT9subscribeEPKc>
    client.subscribe("Lab17/east");
   b41d2:	4905      	ldr	r1, [pc, #20]	; (b41e8 <loop+0x48>)
   b41d4:	4802      	ldr	r0, [pc, #8]	; (b41e0 <loop+0x40>)
}
   b41d6:	b005      	add	sp, #20
   b41d8:	f85d eb04 	ldr.w	lr, [sp], #4
    client.subscribe("Lab17/east");
   b41dc:	f000 bbce 	b.w	b497c <_ZN4MQTT9subscribeEPKc>
   b41e0:	2003e67c 	.word	0x2003e67c
   b41e4:	000b600b 	.word	0x000b600b
   b41e8:	000b6017 	.word	0x000b6017

000b41ec <_GLOBAL__sub_I_client>:
   b41ec:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   b41ee:	2100      	movs	r1, #0
   b41f0:	2001      	movs	r0, #1
   b41f2:	f000 fcd7 	bl	b4ba4 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b41f6:	2300      	movs	r3, #0
   b41f8:	9300      	str	r3, [sp, #0]
   b41fa:	4905      	ldr	r1, [pc, #20]	; (b4210 <_GLOBAL__sub_I_client+0x24>)
   b41fc:	4b05      	ldr	r3, [pc, #20]	; (b4214 <_GLOBAL__sub_I_client+0x28>)
   b41fe:	4806      	ldr	r0, [pc, #24]	; (b4218 <_GLOBAL__sub_I_client+0x2c>)
   b4200:	f240 725b 	movw	r2, #1883	; 0x75b
   b4204:	f000 f84e 	bl	b42a4 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b4208:	b003      	add	sp, #12
   b420a:	f85d fb04 	ldr.w	pc, [sp], #4
   b420e:	bf00      	nop
   b4210:	000b6029 	.word	0x000b6029
   b4214:	000b40f5 	.word	0x000b40f5
   b4218:	2003e67c 	.word	0x2003e67c

000b421c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b421c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4220:	b510      	push	{r4, lr}
   b4222:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4224:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4226:	b113      	cbz	r3, b422e <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4228:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b422a:	f000 fbdb 	bl	b49e4 <os_mutex_lock>
#endif
#endif
#endif
        }
   b422e:	4620      	mov	r0, r4
   b4230:	bd10      	pop	{r4, pc}

000b4232 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b4232:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b423a:	4604      	mov	r4, r0
            if (mqtt->thread)
   b423c:	b112      	cbz	r2, b4244 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b423e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4240:	f000 fbd8 	bl	b49f4 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b4244:	4620      	mov	r0, r4
   b4246:	bd10      	pop	{r4, pc}

000b4248 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b424a:	461f      	mov	r7, r3
   b424c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4250:	4604      	mov	r4, r0
   b4252:	460d      	mov	r5, r1
   b4254:	4616      	mov	r6, r2
    if (thread) {
   b4256:	b12b      	cbz	r3, b4264 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4258:	2301      	movs	r3, #1
   b425a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b425e:	3058      	adds	r0, #88	; 0x58
   b4260:	f000 fbb8 	bl	b49d4 <os_mutex_create>
    }
    this->callback = callback;
   b4264:	9b08      	ldr	r3, [sp, #32]
   b4266:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4268:	2300      	movs	r3, #0
   b426a:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b426c:	b106      	cbz	r6, b4270 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b426e:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4270:	b125      	cbz	r5, b427c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b4272:	4629      	mov	r1, r5
   b4274:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4278:	f000 fe07 	bl	b4e8a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b427c:	9b06      	ldr	r3, [sp, #24]
   b427e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4280:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b4282:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b4284:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4288:	2bff      	cmp	r3, #255	; 0xff
   b428a:	bfb8      	it	lt
   b428c:	23ff      	movlt	r3, #255	; 0xff
   b428e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b4292:	b108      	cbz	r0, b4298 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b4294:	f7ff ff13 	bl	b40be <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4298:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b429c:	f7ff ff0d 	bl	b40ba <_Znaj>
   b42a0:	61e0      	str	r0, [r4, #28]
}
   b42a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42a4 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b42a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b42a8:	4604      	mov	r4, r0
            bool thread) {
   b42aa:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b42ac:	4617      	mov	r7, r2
   b42ae:	4698      	mov	r8, r3
   b42b0:	460e      	mov	r6, r1
            bool thread) {
   b42b2:	f001 fb8f 	bl	b59d4 <_ZN9TCPClientC1Ev>
   b42b6:	490d      	ldr	r1, [pc, #52]	; (b42ec <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b42b8:	61e5      	str	r5, [r4, #28]
   b42ba:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b42be:	f000 fdd0 	bl	b4e62 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b42c2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b42c6:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b42c8:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b42cc:	22ff      	movs	r2, #255	; 0xff
   b42ce:	230f      	movs	r3, #15
   b42d0:	e9cd 3200 	strd	r3, r2, [sp]
   b42d4:	4620      	mov	r0, r4
            bool thread) {
   b42d6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b42da:	463b      	mov	r3, r7
   b42dc:	462a      	mov	r2, r5
   b42de:	4631      	mov	r1, r6
   b42e0:	f7ff ffb2 	bl	b4248 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b42e4:	4620      	mov	r0, r4
   b42e6:	b004      	add	sp, #16
   b42e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b42ec:	000b6028 	.word	0x000b6028

000b42f0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b42f0:	b510      	push	{r4, lr}
   b42f2:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b42f4:	4620      	mov	r0, r4
   b42f6:	f001 fac9 	bl	b588c <_ZN9TCPClient9availableEv>
   b42fa:	2800      	cmp	r0, #0
   b42fc:	d0fa      	beq.n	b42f4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b42fe:	4620      	mov	r0, r4
   b4300:	f001 f8d2 	bl	b54a8 <_ZN9TCPClient4readEv>
}
   b4304:	b2c0      	uxtb	r0, r0
   b4306:	bd10      	pop	{r4, pc}

000b4308 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b430c:	4605      	mov	r5, r0
   b430e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4310:	f7ff ffee 	bl	b42f0 <_ZN4MQTT8readByteEv>
   b4314:	69eb      	ldr	r3, [r5, #28]
   b4316:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4318:	69eb      	ldr	r3, [r5, #28]
   b431a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b431e:	f04f 0901 	mov.w	r9, #1
   b4322:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4326:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4328:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b432a:	4628      	mov	r0, r5
   b432c:	f7ff ffe0 	bl	b42f0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4330:	4626      	mov	r6, r4
   b4332:	69eb      	ldr	r3, [r5, #28]
   b4334:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b4336:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b433a:	fb13 f309 	smulbb	r3, r3, r9
   b433e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b4340:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b4342:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b4344:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b4346:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4348:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b434c:	d4ed      	bmi.n	b432a <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b434e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4350:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b4354:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4358:	d11e      	bne.n	b4398 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b435a:	4628      	mov	r0, r5
   b435c:	f7ff ffc8 	bl	b42f0 <_ZN4MQTT8readByteEv>
   b4360:	69eb      	ldr	r3, [r5, #28]
   b4362:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b4364:	4628      	mov	r0, r5
   b4366:	f7ff ffc3 	bl	b42f0 <_ZN4MQTT8readByteEv>
   b436a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b436c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b436e:	b2b6      	uxth	r6, r6
   b4370:	69eb      	ldr	r3, [r5, #28]
   b4372:	b2a4      	uxth	r4, r4
   b4374:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b4376:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b4378:	b2b6      	uxth	r6, r6
   b437a:	42be      	cmp	r6, r7
   b437c:	d20e      	bcs.n	b439c <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b437e:	4628      	mov	r0, r5
   b4380:	f7ff ffb6 	bl	b42f0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b4384:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b4388:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b438a:	bf84      	itt	hi
   b438c:	69eb      	ldrhi	r3, [r5, #28]
   b438e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b4390:	3401      	adds	r4, #1
   b4392:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b4394:	3601      	adds	r6, #1
   b4396:	e7ef      	b.n	b4378 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4398:	2600      	movs	r6, #0
   b439a:	e7ed      	b.n	b4378 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b439c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b43a0:	42a3      	cmp	r3, r4
   b43a2:	bf2c      	ite	cs
   b43a4:	4620      	movcs	r0, r4
   b43a6:	2000      	movcc	r0, #0
   b43a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b43ac <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b43ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b43b0:	4615      	mov	r5, r2
   b43b2:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b43b4:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b43b6:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b43b8:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b43ba:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b43bc:	a802      	add	r0, sp, #8
        digit = len % 128;
   b43be:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b43c2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b43c6:	f103 0401 	add.w	r4, r3, #1
   b43ca:	4403      	add	r3, r0
            digit |= 0x80;
   b43cc:	bf88      	it	hi
   b43ce:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b43d2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b43d6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b43da:	b2e4      	uxtb	r4, r4
   b43dc:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b43e0:	d81e      	bhi.n	b4420 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b43e2:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b43e6:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b43ea:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b43ec:	4622      	mov	r2, r4
   b43ee:	a901      	add	r1, sp, #4
   b43f0:	4428      	add	r0, r5
    buf[4-llen] = header;
   b43f2:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b43f6:	f001 fd4b 	bl	b5e90 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b43fa:	1c72      	adds	r2, r6, #1
   b43fc:	4422      	add	r2, r4
   b43fe:	4641      	mov	r1, r8
   b4400:	4638      	mov	r0, r7
   b4402:	f001 f83c 	bl	b547e <_ZN9TCPClient5writeEPKhj>
   b4406:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4408:	f000 fadc 	bl	b49c4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b440c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b440e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4410:	4432      	add	r2, r6
   b4412:	b2a8      	uxth	r0, r5
}
   b4414:	1a13      	subs	r3, r2, r0
   b4416:	4258      	negs	r0, r3
   b4418:	4158      	adcs	r0, r3
   b441a:	b002      	add	sp, #8
   b441c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4420:	4623      	mov	r3, r4
   b4422:	e7ca      	b.n	b43ba <_ZN4MQTT5writeEhPht+0xe>

000b4424 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4424:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4426:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4428:	4605      	mov	r5, r0
    pos += 2;
   b442a:	b298      	uxth	r0, r3
   b442c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b442e:	5cce      	ldrb	r6, [r1, r3]
   b4430:	b29c      	uxth	r4, r3
   b4432:	b156      	cbz	r6, b444a <_ZN4MQTT11writeStringEPKcPht+0x26>
   b4434:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4438:	4584      	cmp	ip, r0
   b443a:	f103 0701 	add.w	r7, r3, #1
   b443e:	d904      	bls.n	b444a <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b4440:	1c44      	adds	r4, r0, #1
   b4442:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b4444:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b4446:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4448:	e7f1      	b.n	b442e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b444a:	b299      	uxth	r1, r3
   b444c:	1a41      	subs	r1, r0, r1
   b444e:	440a      	add	r2, r1
   b4450:	0a21      	lsrs	r1, r4, #8
   b4452:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b4456:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b445a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b445c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b445c:	b538      	push	{r3, r4, r5, lr}
   b445e:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4460:	f001 f936 	bl	b56d0 <_ZN9TCPClient9connectedEv>
   b4464:	2800      	cmp	r0, #0
   b4466:	bf14      	ite	ne
   b4468:	2501      	movne	r5, #1
   b446a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b446c:	d102      	bne.n	b4474 <_ZN4MQTT11isConnectedEv+0x18>
   b446e:	4620      	mov	r0, r4
   b4470:	f001 fa66 	bl	b5940 <_ZN9TCPClient4stopEv>
    return rc;
}
   b4474:	4628      	mov	r0, r5
   b4476:	bd38      	pop	{r3, r4, r5, pc}

000b4478 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b447c:	b088      	sub	sp, #32
   b447e:	4604      	mov	r4, r0
   b4480:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b4484:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4488:	4689      	mov	r9, r1
   b448a:	4617      	mov	r7, r2
   b448c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b448e:	f7ff ffe5 	bl	b445c <_ZN4MQTT11isConnectedEv>
   b4492:	4605      	mov	r5, r0
   b4494:	2800      	cmp	r0, #0
   b4496:	f040 80cd 	bne.w	b4634 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b449a:	4621      	mov	r1, r4
   b449c:	a801      	add	r0, sp, #4
   b449e:	f7ff febd 	bl	b421c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b44a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b44a4:	2900      	cmp	r1, #0
   b44a6:	f040 8088 	bne.w	b45ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b44aa:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b44ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b44b0:	462b      	mov	r3, r5
   b44b2:	4620      	mov	r0, r4
   b44b4:	f001 f88e 	bl	b55d4 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b44b8:	2800      	cmp	r0, #0
   b44ba:	d07a      	beq.n	b45b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b44bc:	2301      	movs	r3, #1
   b44be:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b44c0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b44c4:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b44c6:	2b04      	cmp	r3, #4
   b44c8:	4b5b      	ldr	r3, [pc, #364]	; (b4638 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b44ca:	f040 8081 	bne.w	b45d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b44ce:	6818      	ldr	r0, [r3, #0]
   b44d0:	8899      	ldrh	r1, [r3, #4]
   b44d2:	799b      	ldrb	r3, [r3, #6]
   b44d4:	f8ad 100c 	strh.w	r1, [sp, #12]
   b44d8:	f88d 300e 	strb.w	r3, [sp, #14]
   b44dc:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b44de:	f8c2 0005 	str.w	r0, [r2, #5]
   b44e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b44e6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b44ea:	f8a2 1009 	strh.w	r1, [r2, #9]
   b44ee:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b44f0:	230c      	movs	r3, #12
            if (willTopic) {
   b44f2:	f1b8 0f00 	cmp.w	r8, #0
   b44f6:	f000 8081 	beq.w	b45fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b44fa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b44fe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4502:	0140      	lsls	r0, r0, #5
   b4504:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4508:	f040 0006 	orr.w	r0, r0, #6
   b450c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b450e:	f1ba 0f00 	cmp.w	sl, #0
   b4512:	d101      	bne.n	b4518 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4514:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4518:	b11f      	cbz	r7, b4522 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b451a:	2e00      	cmp	r6, #0
   b451c:	d170      	bne.n	b4600 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b451e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b4522:	69e2      	ldr	r2, [r4, #28]
   b4524:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4526:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4528:	69e1      	ldr	r1, [r4, #28]
   b452a:	1c58      	adds	r0, r3, #1
   b452c:	1212      	asrs	r2, r2, #8
   b452e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b4530:	1c9a      	adds	r2, r3, #2
   b4532:	69e1      	ldr	r1, [r4, #28]
   b4534:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4536:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4538:	3303      	adds	r3, #3
   b453a:	69e2      	ldr	r2, [r4, #28]
   b453c:	4649      	mov	r1, r9
   b453e:	4620      	mov	r0, r4
   b4540:	f7ff ff70 	bl	b4424 <_ZN4MQTT11writeStringEPKcPht>
   b4544:	4603      	mov	r3, r0
            if (willTopic) {
   b4546:	f1b8 0f00 	cmp.w	r8, #0
   b454a:	d00b      	beq.n	b4564 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b454c:	69e2      	ldr	r2, [r4, #28]
   b454e:	4641      	mov	r1, r8
   b4550:	4620      	mov	r0, r4
   b4552:	f7ff ff67 	bl	b4424 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b4556:	69e2      	ldr	r2, [r4, #28]
   b4558:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b455a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b455c:	4620      	mov	r0, r4
   b455e:	f7ff ff61 	bl	b4424 <_ZN4MQTT11writeStringEPKcPht>
   b4562:	4603      	mov	r3, r0
            if(user != NULL) {
   b4564:	b167      	cbz	r7, b4580 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b4566:	69e2      	ldr	r2, [r4, #28]
   b4568:	4639      	mov	r1, r7
   b456a:	4620      	mov	r0, r4
   b456c:	f7ff ff5a 	bl	b4424 <_ZN4MQTT11writeStringEPKcPht>
   b4570:	4603      	mov	r3, r0
                if(pass != NULL) {
   b4572:	b12e      	cbz	r6, b4580 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b4574:	69e2      	ldr	r2, [r4, #28]
   b4576:	4631      	mov	r1, r6
   b4578:	4620      	mov	r0, r4
   b457a:	f7ff ff53 	bl	b4424 <_ZN4MQTT11writeStringEPKcPht>
   b457e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4580:	3b05      	subs	r3, #5
   b4582:	69e2      	ldr	r2, [r4, #28]
   b4584:	b29b      	uxth	r3, r3
   b4586:	2110      	movs	r1, #16
   b4588:	4620      	mov	r0, r4
   b458a:	f7ff ff0f 	bl	b43ac <_ZN4MQTT5writeEhPht>
   b458e:	f000 fa19 	bl	b49c4 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4592:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4596:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b459a:	4620      	mov	r0, r4
   b459c:	f001 f976 	bl	b588c <_ZN9TCPClient9availableEv>
   b45a0:	bb88      	cbnz	r0, b4606 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b45a2:	f000 fa0f 	bl	b49c4 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b45a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b45a8:	1ac0      	subs	r0, r0, r3
   b45aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b45ac:	4373      	muls	r3, r6
   b45ae:	4298      	cmp	r0, r3
   b45b0:	d9f3      	bls.n	b459a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b45b2:	4620      	mov	r0, r4
   b45b4:	f001 f9c4 	bl	b5940 <_ZN9TCPClient4stopEv>
   b45b8:	e035      	b.n	b4626 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b45ba:	a802      	add	r0, sp, #8
   b45bc:	f000 fe6c 	bl	b5298 <_ZN9IPAddressC1EPKh>
   b45c0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b45c4:	462b      	mov	r3, r5
   b45c6:	a902      	add	r1, sp, #8
   b45c8:	4620      	mov	r0, r4
   b45ca:	f001 f8e3 	bl	b5794 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b45ce:	e773      	b.n	b44b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b45d0:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b45d4:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b45d8:	7bdb      	ldrb	r3, [r3, #15]
   b45da:	f10d 0c08 	add.w	ip, sp, #8
   b45de:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b45e2:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b45e6:	ab02      	add	r3, sp, #8
   b45e8:	cb03      	ldmia	r3!, {r0, r1}
   b45ea:	f8c2 0005 	str.w	r0, [r2, #5]
   b45ee:	f8c2 1009 	str.w	r1, [r2, #9]
   b45f2:	f89c 3000 	ldrb.w	r3, [ip]
   b45f6:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b45f8:	230e      	movs	r3, #14
   b45fa:	e77a      	b.n	b44f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b45fc:	2002      	movs	r0, #2
   b45fe:	e786      	b.n	b450e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b4600:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4604:	e78d      	b.n	b4522 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b4606:	a902      	add	r1, sp, #8
   b4608:	4620      	mov	r0, r4
   b460a:	f7ff fe7d 	bl	b4308 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b460e:	2804      	cmp	r0, #4
   b4610:	d1cf      	bne.n	b45b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b4612:	69e3      	ldr	r3, [r4, #28]
   b4614:	78de      	ldrb	r6, [r3, #3]
   b4616:	2e00      	cmp	r6, #0
   b4618:	d1cb      	bne.n	b45b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b461a:	f000 f9d3 	bl	b49c4 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b461e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b4620:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b4622:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b4626:	a801      	add	r0, sp, #4
   b4628:	f7ff fe03 	bl	b4232 <_ZN4MQTT11MutexLockerD1Ev>
}
   b462c:	4628      	mov	r0, r5
   b462e:	b008      	add	sp, #32
   b4630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b4634:	2500      	movs	r5, #0
   b4636:	e7f9      	b.n	b462c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b4638:	000b5fe4 	.word	0x000b5fe4

000b463c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b463c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b463e:	2301      	movs	r3, #1
   b4640:	2204      	movs	r2, #4
   b4642:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b4646:	2300      	movs	r3, #0
   b4648:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b464c:	e9cd 3300 	strd	r3, r3, [sp]
   b4650:	461a      	mov	r2, r3
   b4652:	f7ff ff11 	bl	b4478 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b4656:	b007      	add	sp, #28
   b4658:	f85d fb04 	ldr.w	pc, [sp], #4

000b465c <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b465c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b465e:	4604      	mov	r4, r0
   b4660:	460e      	mov	r6, r1
    if (isConnected()) {
   b4662:	f7ff fefb 	bl	b445c <_ZN4MQTT11isConnectedEv>
   b4666:	4605      	mov	r5, r0
   b4668:	b1c8      	cbz	r0, b469e <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b466a:	4621      	mov	r1, r4
   b466c:	a801      	add	r0, sp, #4
   b466e:	f7ff fdd5 	bl	b421c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4672:	69e3      	ldr	r3, [r4, #28]
   b4674:	2262      	movs	r2, #98	; 0x62
   b4676:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4678:	69e3      	ldr	r3, [r4, #28]
   b467a:	2202      	movs	r2, #2
   b467c:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b467e:	69e3      	ldr	r3, [r4, #28]
   b4680:	0a32      	lsrs	r2, r6, #8
   b4682:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4684:	69e3      	ldr	r3, [r4, #28]
   b4686:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4688:	69e1      	ldr	r1, [r4, #28]
   b468a:	2204      	movs	r2, #4
   b468c:	4620      	mov	r0, r4
   b468e:	f000 fef6 	bl	b547e <_ZN9TCPClient5writeEPKhj>
   b4692:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4694:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4696:	bf18      	it	ne
   b4698:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b469a:	f7ff fdca 	bl	b4232 <_ZN4MQTT11MutexLockerD1Ev>
}
   b469e:	4628      	mov	r0, r5
   b46a0:	b002      	add	sp, #8
   b46a2:	bd70      	pop	{r4, r5, r6, pc}

000b46a4 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b46a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b46a6:	4604      	mov	r4, r0
   b46a8:	460e      	mov	r6, r1
    if (isConnected()) {
   b46aa:	f7ff fed7 	bl	b445c <_ZN4MQTT11isConnectedEv>
   b46ae:	4605      	mov	r5, r0
   b46b0:	b1c8      	cbz	r0, b46e6 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b46b2:	4621      	mov	r1, r4
   b46b4:	a801      	add	r0, sp, #4
   b46b6:	f7ff fdb1 	bl	b421c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b46ba:	69e3      	ldr	r3, [r4, #28]
   b46bc:	2272      	movs	r2, #114	; 0x72
   b46be:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b46c0:	69e3      	ldr	r3, [r4, #28]
   b46c2:	2202      	movs	r2, #2
   b46c4:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b46c6:	69e3      	ldr	r3, [r4, #28]
   b46c8:	0a32      	lsrs	r2, r6, #8
   b46ca:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b46cc:	69e3      	ldr	r3, [r4, #28]
   b46ce:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b46d0:	69e1      	ldr	r1, [r4, #28]
   b46d2:	2204      	movs	r2, #4
   b46d4:	4620      	mov	r0, r4
   b46d6:	f000 fed2 	bl	b547e <_ZN9TCPClient5writeEPKhj>
   b46da:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b46dc:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b46de:	bf18      	it	ne
   b46e0:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b46e2:	f7ff fda6 	bl	b4232 <_ZN4MQTT11MutexLockerD1Ev>
}
   b46e6:	4628      	mov	r0, r5
   b46e8:	b002      	add	sp, #8
   b46ea:	bd70      	pop	{r4, r5, r6, pc}

000b46ec <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b46ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b46f0:	ed2d 8b02 	vpush	{d8}
   b46f4:	b087      	sub	sp, #28
   b46f6:	af00      	add	r7, sp, #0
   b46f8:	4604      	mov	r4, r0
    if (isConnected()) {
   b46fa:	f7ff feaf 	bl	b445c <_ZN4MQTT11isConnectedEv>
   b46fe:	4681      	mov	r9, r0
   b4700:	b1f8      	cbz	r0, b4742 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b4702:	4621      	mov	r1, r4
   b4704:	f107 0014 	add.w	r0, r7, #20
   b4708:	f7ff fd88 	bl	b421c <_ZN4MQTT11MutexLockerC1EPS_>
   b470c:	f000 f95a 	bl	b49c4 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b4710:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4716:	4353      	muls	r3, r2
   b4718:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b471a:	1a82      	subs	r2, r0, r2
   b471c:	429a      	cmp	r2, r3
   b471e:	4606      	mov	r6, r0
   b4720:	d803      	bhi.n	b472a <_ZN4MQTT4loopEv+0x3e>
   b4722:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4724:	1a82      	subs	r2, r0, r2
   b4726:	4293      	cmp	r3, r2
   b4728:	d221      	bcs.n	b476e <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b472a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b472e:	b17b      	cbz	r3, b4750 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b4730:	4620      	mov	r0, r4
   b4732:	f001 f905 	bl	b5940 <_ZN9TCPClient4stopEv>
                return false;
   b4736:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b473a:	f107 0014 	add.w	r0, r7, #20
   b473e:	f7ff fd78 	bl	b4232 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4742:	4648      	mov	r0, r9
   b4744:	371c      	adds	r7, #28
   b4746:	46bd      	mov	sp, r7
   b4748:	ecbd 8b02 	vpop	{d8}
   b474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b4750:	69e2      	ldr	r2, [r4, #28]
   b4752:	21c0      	movs	r1, #192	; 0xc0
   b4754:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b4756:	69e2      	ldr	r2, [r4, #28]
   b4758:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b475a:	69e1      	ldr	r1, [r4, #28]
   b475c:	2202      	movs	r2, #2
   b475e:	4620      	mov	r0, r4
   b4760:	f000 fe8d 	bl	b547e <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b4764:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b4768:	2301      	movs	r3, #1
   b476a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b476e:	4620      	mov	r0, r4
   b4770:	f001 f88c 	bl	b588c <_ZN9TCPClient9availableEv>
   b4774:	2800      	cmp	r0, #0
   b4776:	d0e0      	beq.n	b473a <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4778:	f107 0113 	add.w	r1, r7, #19
   b477c:	4620      	mov	r0, r4
   b477e:	f7ff fdc3 	bl	b4308 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4782:	4683      	mov	fp, r0
   b4784:	2800      	cmp	r0, #0
   b4786:	d0d8      	beq.n	b473a <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4788:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b478a:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b478c:	7819      	ldrb	r1, [r3, #0]
   b478e:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4792:	2a30      	cmp	r2, #48	; 0x30
   b4794:	d17f      	bne.n	b4896 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4796:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b479a:	f1ba 0f00 	cmp.w	sl, #0
   b479e:	d0cc      	beq.n	b473a <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b47a0:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b47a4:	466a      	mov	r2, sp
   b47a6:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b47aa:	eb03 020c 	add.w	r2, r3, ip
   b47ae:	7851      	ldrb	r1, [r2, #1]
   b47b0:	7895      	ldrb	r5, [r2, #2]
   b47b2:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b47b6:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b47b8:	f105 0208 	add.w	r2, r5, #8
   b47bc:	4669      	mov	r1, sp
   b47be:	08d2      	lsrs	r2, r2, #3
   b47c0:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b47c4:	4695      	mov	sp, r2
   b47c6:	f10c 0203 	add.w	r2, ip, #3
   b47ca:	60fa      	str	r2, [r7, #12]
   b47cc:	eb03 0e02 	add.w	lr, r3, r2
   b47d0:	eb0d 0205 	add.w	r2, sp, r5
   b47d4:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b47d6:	f8c7 d008 	str.w	sp, [r7, #8]
   b47da:	607a      	str	r2, [r7, #4]
   b47dc:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b47e0:	428a      	cmp	r2, r1
   b47e2:	d006      	beq.n	b47f2 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b47e4:	460a      	mov	r2, r1
   b47e6:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b47ea:	f802 8b01 	strb.w	r8, [r2], #1
   b47ee:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b47f0:	e7f4      	b.n	b47dc <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b47f2:	2200      	movs	r2, #0
   b47f4:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b47f6:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b47fa:	68f9      	ldr	r1, [r7, #12]
   b47fc:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b4800:	ebab 020c 	sub.w	r2, fp, ip
   b4804:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4806:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b480a:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b480e:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4810:	d125      	bne.n	b485e <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4812:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4816:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b4818:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b481a:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b481e:	f10c 0105 	add.w	r1, ip, #5
   b4822:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b4824:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4826:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b482a:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b482c:	69e3      	ldr	r3, [r4, #28]
   b482e:	2240      	movs	r2, #64	; 0x40
   b4830:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b4832:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4834:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b4838:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b483c:	69e3      	ldr	r3, [r4, #28]
   b483e:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4842:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b4844:	69e3      	ldr	r3, [r4, #28]
   b4846:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b484a:	69e1      	ldr	r1, [r4, #28]
   b484c:	2204      	movs	r2, #4
   b484e:	4620      	mov	r0, r4
   b4850:	f000 fe15 	bl	b547e <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b4854:	6266      	str	r6, [r4, #36]	; 0x24
   b4856:	ee18 3a10 	vmov	r3, s16
   b485a:	469d      	mov	sp, r3
   b485c:	e76d      	b.n	b473a <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b485e:	f1b8 0f04 	cmp.w	r8, #4
   b4862:	d115      	bne.n	b4890 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4864:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4868:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b486a:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b486c:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4870:	f10c 0105 	add.w	r1, ip, #5
   b4874:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4876:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4878:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b487c:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b487e:	69e3      	ldr	r3, [r4, #28]
   b4880:	2250      	movs	r2, #80	; 0x50
   b4882:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4884:	69e3      	ldr	r3, [r4, #28]
   b4886:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4888:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b488c:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b488e:	e7d5      	b.n	b483c <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4890:	4419      	add	r1, r3
   b4892:	47d0      	blx	sl
   b4894:	e7df      	b.n	b4856 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4896:	2a50      	cmp	r2, #80	; 0x50
   b4898:	d108      	bne.n	b48ac <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b489a:	789a      	ldrb	r2, [r3, #2]
   b489c:	78d9      	ldrb	r1, [r3, #3]
   b489e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b48a2:	b289      	uxth	r1, r1
   b48a4:	4620      	mov	r0, r4
   b48a6:	f7ff fed9 	bl	b465c <_ZN4MQTT14publishReleaseEt>
   b48aa:	e746      	b.n	b473a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b48ac:	2a40      	cmp	r2, #64	; 0x40
   b48ae:	d112      	bne.n	b48d6 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b48b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b48b2:	2a00      	cmp	r2, #0
   b48b4:	f43f af41 	beq.w	b473a <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b48b8:	f1bb 0f04 	cmp.w	fp, #4
   b48bc:	f47f af3d 	bne.w	b473a <_ZN4MQTT4loopEv+0x4e>
   b48c0:	f011 0f06 	tst.w	r1, #6
   b48c4:	f47f af39 	bne.w	b473a <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b48c8:	7899      	ldrb	r1, [r3, #2]
   b48ca:	78d8      	ldrb	r0, [r3, #3]
   b48cc:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b48d0:	b280      	uxth	r0, r0
   b48d2:	4790      	blx	r2
   b48d4:	e731      	b.n	b473a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b48d6:	2a60      	cmp	r2, #96	; 0x60
   b48d8:	d108      	bne.n	b48ec <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b48da:	789a      	ldrb	r2, [r3, #2]
   b48dc:	78d9      	ldrb	r1, [r3, #3]
   b48de:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b48e2:	b289      	uxth	r1, r1
   b48e4:	4620      	mov	r0, r4
   b48e6:	f7ff fedd 	bl	b46a4 <_ZN4MQTT15publishCompleteEt>
   b48ea:	e726      	b.n	b473a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b48ec:	2a70      	cmp	r2, #112	; 0x70
   b48ee:	d0df      	beq.n	b48b0 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b48f0:	2a90      	cmp	r2, #144	; 0x90
   b48f2:	f43f af22 	beq.w	b473a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b48f6:	2ac0      	cmp	r2, #192	; 0xc0
   b48f8:	d10a      	bne.n	b4910 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b48fa:	22d0      	movs	r2, #208	; 0xd0
   b48fc:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b48fe:	69e3      	ldr	r3, [r4, #28]
   b4900:	2200      	movs	r2, #0
   b4902:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b4904:	69e1      	ldr	r1, [r4, #28]
   b4906:	2202      	movs	r2, #2
   b4908:	4620      	mov	r0, r4
   b490a:	f000 fdb8 	bl	b547e <_ZN9TCPClient5writeEPKhj>
   b490e:	e714      	b.n	b473a <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b4910:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b4912:	bf04      	itt	eq
   b4914:	2300      	moveq	r3, #0
   b4916:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b491a:	e70e      	b.n	b473a <_ZN4MQTT4loopEv+0x4e>

000b491c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b491c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b491e:	4604      	mov	r4, r0
   b4920:	460f      	mov	r7, r1
   b4922:	4616      	mov	r6, r2
    if (isConnected()) {
   b4924:	f7ff fd9a 	bl	b445c <_ZN4MQTT11isConnectedEv>
   b4928:	4605      	mov	r5, r0
   b492a:	b310      	cbz	r0, b4972 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b492c:	4621      	mov	r1, r4
   b492e:	a801      	add	r0, sp, #4
   b4930:	f7ff fc74 	bl	b421c <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b4934:	8c23      	ldrh	r3, [r4, #32]
   b4936:	3301      	adds	r3, #1
   b4938:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b493a:	b1eb      	cbz	r3, b4978 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b493c:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b493e:	8c23      	ldrh	r3, [r4, #32]
   b4940:	69e2      	ldr	r2, [r4, #28]
   b4942:	0a1b      	lsrs	r3, r3, #8
   b4944:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b4946:	69e3      	ldr	r3, [r4, #28]
   b4948:	8c22      	ldrh	r2, [r4, #32]
   b494a:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b494c:	69e2      	ldr	r2, [r4, #28]
   b494e:	2307      	movs	r3, #7
   b4950:	4639      	mov	r1, r7
   b4952:	4620      	mov	r0, r4
   b4954:	f7ff fd66 	bl	b4424 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b4958:	69e3      	ldr	r3, [r4, #28]
   b495a:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b495c:	3804      	subs	r0, #4
   b495e:	b283      	uxth	r3, r0
   b4960:	69e2      	ldr	r2, [r4, #28]
   b4962:	2182      	movs	r1, #130	; 0x82
   b4964:	4620      	mov	r0, r4
   b4966:	f7ff fd21 	bl	b43ac <_ZN4MQTT5writeEhPht>
   b496a:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b496c:	a801      	add	r0, sp, #4
   b496e:	f7ff fc60 	bl	b4232 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4972:	4628      	mov	r0, r5
   b4974:	b003      	add	sp, #12
   b4976:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b4978:	2301      	movs	r3, #1
   b497a:	e7df      	b.n	b493c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b497c <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b497c:	2200      	movs	r2, #0
   b497e:	f7ff bfcd 	b.w	b491c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

000b4984 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <netdb_freeaddrinfo+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	689b      	ldr	r3, [r3, #8]
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	00030268 	.word	0x00030268

000b4994 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <netdb_getaddrinfo+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	68db      	ldr	r3, [r3, #12]
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	00030268 	.word	0x00030268

000b49a4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <if_index_to_name+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	695b      	ldr	r3, [r3, #20]
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	0003026c 	.word	0x0003026c

000b49b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <HAL_RNG_GetRandomNumber+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	685b      	ldr	r3, [r3, #4]
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	00030218 	.word	0x00030218

000b49c4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	695b      	ldr	r3, [r3, #20]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	00030218 	.word	0x00030218

000b49d4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <os_mutex_create+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	00030248 	.word	0x00030248

000b49e4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <os_mutex_lock+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	00030248 	.word	0x00030248

000b49f4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <os_mutex_unlock+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030248 	.word	0x00030248

000b4a04 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <os_mutex_recursive_create+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	00030248 	.word	0x00030248

000b4a14 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <inet_inet_ntop+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	695b      	ldr	r3, [r3, #20]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	00030264 	.word	0x00030264

000b4a24 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <inet_htonl+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	6a1b      	ldr	r3, [r3, #32]
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	00030264 	.word	0x00030264

000b4a34 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <inet_htons+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	00030264 	.word	0x00030264

000b4a44 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <hal_usart_write+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	68db      	ldr	r3, [r3, #12]
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	0003023c 	.word	0x0003023c

000b4a54 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <hal_usart_available+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	691b      	ldr	r3, [r3, #16]
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	0003023c 	.word	0x0003023c

000b4a64 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <hal_usart_read+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	695b      	ldr	r3, [r3, #20]
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	0003023c 	.word	0x0003023c

000b4a74 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <hal_usart_peek+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	699b      	ldr	r3, [r3, #24]
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	0003023c 	.word	0x0003023c

000b4a84 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <hal_usart_flush+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	69db      	ldr	r3, [r3, #28]
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	0003023c 	.word	0x0003023c

000b4a94 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <hal_usart_available_data_for_write+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	0003023c 	.word	0x0003023c

000b4aa4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <hal_usart_init_ex+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	0003023c 	.word	0x0003023c

000b4ab4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	4b02      	ldr	r3, [pc, #8]	; (b4ac0 <sock_setsockopt+0xc>)
   b4ab8:	681b      	ldr	r3, [r3, #0]
   b4aba:	699b      	ldr	r3, [r3, #24]
   b4abc:	9301      	str	r3, [sp, #4]
   b4abe:	bd08      	pop	{r3, pc}
   b4ac0:	00030238 	.word	0x00030238

000b4ac4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4ac4:	b508      	push	{r3, lr}
   b4ac6:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <sock_close+0xc>)
   b4ac8:	681b      	ldr	r3, [r3, #0]
   b4aca:	69db      	ldr	r3, [r3, #28]
   b4acc:	9301      	str	r3, [sp, #4]
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	00030238 	.word	0x00030238

000b4ad4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4ad4:	b508      	push	{r3, lr}
   b4ad6:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <sock_connect+0xc>)
   b4ad8:	681b      	ldr	r3, [r3, #0]
   b4ada:	6a1b      	ldr	r3, [r3, #32]
   b4adc:	9301      	str	r3, [sp, #4]
   b4ade:	bd08      	pop	{r3, pc}
   b4ae0:	00030238 	.word	0x00030238

000b4ae4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <sock_recv+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	00030238 	.word	0x00030238

000b4af4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4af4:	b508      	push	{r3, lr}
   b4af6:	4b02      	ldr	r3, [pc, #8]	; (b4b00 <sock_send+0xc>)
   b4af8:	681b      	ldr	r3, [r3, #0]
   b4afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4afc:	9301      	str	r3, [sp, #4]
   b4afe:	bd08      	pop	{r3, pc}
   b4b00:	00030238 	.word	0x00030238

000b4b04 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <sock_socket+0xc>)
   b4b08:	681b      	ldr	r3, [r3, #0]
   b4b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4b0c:	9301      	str	r3, [sp, #4]
   b4b0e:	bd08      	pop	{r3, pc}
   b4b10:	00030238 	.word	0x00030238

000b4b14 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b02      	ldr	r3, [pc, #8]	; (b4b20 <HAL_USB_USART_Init+0xc>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	681b      	ldr	r3, [r3, #0]
   b4b1c:	9301      	str	r3, [sp, #4]
   b4b1e:	bd08      	pop	{r3, pc}
   b4b20:	0003024c 	.word	0x0003024c

000b4b24 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4b24:	b508      	push	{r3, lr}
   b4b26:	4b02      	ldr	r3, [pc, #8]	; (b4b30 <HAL_USB_USART_Begin+0xc>)
   b4b28:	681b      	ldr	r3, [r3, #0]
   b4b2a:	685b      	ldr	r3, [r3, #4]
   b4b2c:	9301      	str	r3, [sp, #4]
   b4b2e:	bd08      	pop	{r3, pc}
   b4b30:	0003024c 	.word	0x0003024c

000b4b34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4b34:	b508      	push	{r3, lr}
   b4b36:	4b02      	ldr	r3, [pc, #8]	; (b4b40 <HAL_USB_USART_Available_Data+0xc>)
   b4b38:	681b      	ldr	r3, [r3, #0]
   b4b3a:	691b      	ldr	r3, [r3, #16]
   b4b3c:	9301      	str	r3, [sp, #4]
   b4b3e:	bd08      	pop	{r3, pc}
   b4b40:	0003024c 	.word	0x0003024c

000b4b44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4b44:	b508      	push	{r3, lr}
   b4b46:	4b02      	ldr	r3, [pc, #8]	; (b4b50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4b48:	681b      	ldr	r3, [r3, #0]
   b4b4a:	695b      	ldr	r3, [r3, #20]
   b4b4c:	9301      	str	r3, [sp, #4]
   b4b4e:	bd08      	pop	{r3, pc}
   b4b50:	0003024c 	.word	0x0003024c

000b4b54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4b02      	ldr	r3, [pc, #8]	; (b4b60 <HAL_USB_USART_Receive_Data+0xc>)
   b4b58:	681b      	ldr	r3, [r3, #0]
   b4b5a:	699b      	ldr	r3, [r3, #24]
   b4b5c:	9301      	str	r3, [sp, #4]
   b4b5e:	bd08      	pop	{r3, pc}
   b4b60:	0003024c 	.word	0x0003024c

000b4b64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b64:	b508      	push	{r3, lr}
   b4b66:	4b02      	ldr	r3, [pc, #8]	; (b4b70 <HAL_USB_USART_Send_Data+0xc>)
   b4b68:	681b      	ldr	r3, [r3, #0]
   b4b6a:	69db      	ldr	r3, [r3, #28]
   b4b6c:	9301      	str	r3, [sp, #4]
   b4b6e:	bd08      	pop	{r3, pc}
   b4b70:	0003024c 	.word	0x0003024c

000b4b74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4b74:	b508      	push	{r3, lr}
   b4b76:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <HAL_USB_USART_Flush_Data+0xc>)
   b4b78:	681b      	ldr	r3, [r3, #0]
   b4b7a:	6a1b      	ldr	r3, [r3, #32]
   b4b7c:	9301      	str	r3, [sp, #4]
   b4b7e:	bd08      	pop	{r3, pc}
   b4b80:	0003024c 	.word	0x0003024c

000b4b84 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <log_message+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	00030260 	.word	0x00030260

000b4b94 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <set_system_mode+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	685b      	ldr	r3, [r3, #4]
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	00030220 	.word	0x00030220

000b4ba4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <system_thread_set_state+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	00030220 	.word	0x00030220

000b4bb4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b03      	ldr	r3, [pc, #12]	; (b4bc4 <system_ctrl_set_app_request_handler+0x10>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4bbe:	9301      	str	r3, [sp, #4]
   b4bc0:	bd08      	pop	{r3, pc}
   b4bc2:	0000      	.short	0x0000
   b4bc4:	00030220 	.word	0x00030220

000b4bc8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b03      	ldr	r3, [pc, #12]	; (b4bd8 <system_ctrl_set_result+0x10>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4bd2:	9301      	str	r3, [sp, #4]
   b4bd4:	bd08      	pop	{r3, pc}
   b4bd6:	0000      	.short	0x0000
   b4bd8:	00030220 	.word	0x00030220

000b4bdc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <network_connect+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	685b      	ldr	r3, [r3, #4]
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	00030240 	.word	0x00030240

000b4bec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <network_connecting+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	689b      	ldr	r3, [r3, #8]
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	00030240 	.word	0x00030240

000b4bfc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <network_disconnect+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	68db      	ldr	r3, [r3, #12]
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	00030240 	.word	0x00030240

000b4c0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <network_ready+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	691b      	ldr	r3, [r3, #16]
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	00030240 	.word	0x00030240

000b4c1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <network_on+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	695b      	ldr	r3, [r3, #20]
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	00030240 	.word	0x00030240

000b4c2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <network_off+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	699b      	ldr	r3, [r3, #24]
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	00030240 	.word	0x00030240

000b4c3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <network_listen+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	69db      	ldr	r3, [r3, #28]
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	00030240 	.word	0x00030240

000b4c4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <network_listening+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	6a1b      	ldr	r3, [r3, #32]
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	00030240 	.word	0x00030240

000b4c5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <network_set_listen_timeout+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	00030240 	.word	0x00030240

000b4c6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <network_get_listen_timeout+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	00030240 	.word	0x00030240

000b4c7c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <network_is_on+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	00030240 	.word	0x00030240

000b4c8c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <network_is_off+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030240 	.word	0x00030240

000b4c9c <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <spark_deviceID+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	69db      	ldr	r3, [r3, #28]
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030244 	.word	0x00030244

000b4cac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030244 	.word	0x00030244

000b4cbc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <malloc+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	681b      	ldr	r3, [r3, #0]
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	0003021c 	.word	0x0003021c

000b4ccc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <free+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	685b      	ldr	r3, [r3, #4]
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	0003021c 	.word	0x0003021c

000b4cdc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <realloc+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	689b      	ldr	r3, [r3, #8]
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	0003021c 	.word	0x0003021c

000b4cec <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <vsnprintf+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	0003021c 	.word	0x0003021c

000b4cfc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <__errno+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	0003021c 	.word	0x0003021c

000b4d0c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <__assert_func+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	0003021c 	.word	0x0003021c

000b4d1c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <newlib_impure_ptr_callback+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	0003021c 	.word	0x0003021c

000b4d2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d2c:	2200      	movs	r2, #0
   b4d2e:	6840      	ldr	r0, [r0, #4]
   b4d30:	4611      	mov	r1, r2
   b4d32:	f7ff bf8b 	b.w	b4c4c <network_listening>

000b4d36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d36:	2200      	movs	r2, #0
   b4d38:	6840      	ldr	r0, [r0, #4]
   b4d3a:	4611      	mov	r1, r2
   b4d3c:	f7ff bf96 	b.w	b4c6c <network_get_listen_timeout>

000b4d40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d40:	6840      	ldr	r0, [r0, #4]
   b4d42:	2200      	movs	r2, #0
   b4d44:	f7ff bf8a 	b.w	b4c5c <network_set_listen_timeout>

000b4d48 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d48:	6840      	ldr	r0, [r0, #4]
   b4d4a:	2200      	movs	r2, #0
   b4d4c:	f081 0101 	eor.w	r1, r1, #1
   b4d50:	f7ff bf74 	b.w	b4c3c <network_listen>

000b4d54 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d54:	2300      	movs	r3, #0
   b4d56:	6840      	ldr	r0, [r0, #4]
   b4d58:	461a      	mov	r2, r3
   b4d5a:	4619      	mov	r1, r3
   b4d5c:	f7ff bf66 	b.w	b4c2c <network_off>

000b4d60 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d60:	2300      	movs	r3, #0
   b4d62:	6840      	ldr	r0, [r0, #4]
   b4d64:	461a      	mov	r2, r3
   b4d66:	4619      	mov	r1, r3
   b4d68:	f7ff bf58 	b.w	b4c1c <network_on>

000b4d6c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4d6c:	2200      	movs	r2, #0
   b4d6e:	6840      	ldr	r0, [r0, #4]
   b4d70:	4611      	mov	r1, r2
   b4d72:	f7ff bf4b 	b.w	b4c0c <network_ready>

000b4d76 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4d76:	2200      	movs	r2, #0
   b4d78:	6840      	ldr	r0, [r0, #4]
   b4d7a:	4611      	mov	r1, r2
   b4d7c:	f7ff bf36 	b.w	b4bec <network_connecting>

000b4d80 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4d80:	6840      	ldr	r0, [r0, #4]
   b4d82:	2200      	movs	r2, #0
   b4d84:	2102      	movs	r1, #2
   b4d86:	f7ff bf39 	b.w	b4bfc <network_disconnect>

000b4d8a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4d8a:	2300      	movs	r3, #0
   b4d8c:	6840      	ldr	r0, [r0, #4]
   b4d8e:	461a      	mov	r2, r3
   b4d90:	f7ff bf24 	b.w	b4bdc <network_connect>

000b4d94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4d94:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4d96:	2203      	movs	r2, #3
   b4d98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4d9a:	4a02      	ldr	r2, [pc, #8]	; (b4da4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4d9c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4d9e:	4770      	bx	lr
   b4da0:	2003e6dc 	.word	0x2003e6dc
   b4da4:	000b6040 	.word	0x000b6040

000b4da8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4da8:	4b05      	ldr	r3, [pc, #20]	; (b4dc0 <_GLOBAL__sub_I_System+0x18>)
   b4daa:	2202      	movs	r2, #2
   b4dac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4dae:	4b05      	ldr	r3, [pc, #20]	; (b4dc4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4db0:	4a05      	ldr	r2, [pc, #20]	; (b4dc8 <_GLOBAL__sub_I_System+0x20>)
   b4db2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4db4:	2000      	movs	r0, #0
   b4db6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4dba:	f7ff beeb 	b.w	b4b94 <set_system_mode>
   b4dbe:	bf00      	nop
   b4dc0:	2003e6f0 	.word	0x2003e6f0
   b4dc4:	2003e6e4 	.word	0x2003e6e4
   b4dc8:	ffff0000 	.word	0xffff0000

000b4dcc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4dcc:	b510      	push	{r4, lr}
   b4dce:	4604      	mov	r4, r0
{
	free(buffer);
   b4dd0:	6800      	ldr	r0, [r0, #0]
   b4dd2:	f7ff ff7b 	bl	b4ccc <free>
}
   b4dd6:	4620      	mov	r0, r4
   b4dd8:	bd10      	pop	{r4, pc}

000b4dda <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4dda:	b510      	push	{r4, lr}
   b4ddc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4dde:	6800      	ldr	r0, [r0, #0]
   b4de0:	b108      	cbz	r0, b4de6 <_ZN6String10invalidateEv+0xc>
   b4de2:	f7ff ff73 	bl	b4ccc <free>
	buffer = NULL;
   b4de6:	2300      	movs	r3, #0
	capacity = len = 0;
   b4de8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4dec:	6023      	str	r3, [r4, #0]
}
   b4dee:	bd10      	pop	{r4, pc}

000b4df0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4df0:	b538      	push	{r3, r4, r5, lr}
   b4df2:	4604      	mov	r4, r0
   b4df4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4df6:	6800      	ldr	r0, [r0, #0]
   b4df8:	3101      	adds	r1, #1
   b4dfa:	f7ff ff6f 	bl	b4cdc <realloc>
	if (newbuffer) {
   b4dfe:	b110      	cbz	r0, b4e06 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4e00:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4e04:	2001      	movs	r0, #1
	}
	return 0;
}
   b4e06:	bd38      	pop	{r3, r4, r5, pc}

000b4e08 <_ZN6String7reserveEj>:
{
   b4e08:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4e0a:	6803      	ldr	r3, [r0, #0]
{
   b4e0c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4e0e:	b123      	cbz	r3, b4e1a <_ZN6String7reserveEj+0x12>
   b4e10:	6843      	ldr	r3, [r0, #4]
   b4e12:	428b      	cmp	r3, r1
   b4e14:	d301      	bcc.n	b4e1a <_ZN6String7reserveEj+0x12>
   b4e16:	2001      	movs	r0, #1
}
   b4e18:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4e1a:	4620      	mov	r0, r4
   b4e1c:	f7ff ffe8 	bl	b4df0 <_ZN6String12changeBufferEj>
   b4e20:	2800      	cmp	r0, #0
   b4e22:	d0f9      	beq.n	b4e18 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4e24:	68a3      	ldr	r3, [r4, #8]
   b4e26:	2b00      	cmp	r3, #0
   b4e28:	d1f5      	bne.n	b4e16 <_ZN6String7reserveEj+0xe>
   b4e2a:	6822      	ldr	r2, [r4, #0]
   b4e2c:	7013      	strb	r3, [r2, #0]
   b4e2e:	e7f2      	b.n	b4e16 <_ZN6String7reserveEj+0xe>

000b4e30 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4e32:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4e34:	4611      	mov	r1, r2
   b4e36:	9201      	str	r2, [sp, #4]
{
   b4e38:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4e3a:	f7ff ffe5 	bl	b4e08 <_ZN6String7reserveEj>
   b4e3e:	9a01      	ldr	r2, [sp, #4]
   b4e40:	b928      	cbnz	r0, b4e4e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4e42:	4620      	mov	r0, r4
   b4e44:	f7ff ffc9 	bl	b4dda <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4e48:	4620      	mov	r0, r4
   b4e4a:	b003      	add	sp, #12
   b4e4c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4e4e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4e50:	4629      	mov	r1, r5
   b4e52:	6820      	ldr	r0, [r4, #0]
   b4e54:	f001 f81c 	bl	b5e90 <memcpy>
	buffer[len] = 0;
   b4e58:	6822      	ldr	r2, [r4, #0]
   b4e5a:	68a3      	ldr	r3, [r4, #8]
   b4e5c:	2100      	movs	r1, #0
   b4e5e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4e60:	e7f2      	b.n	b4e48 <_ZN6String4copyEPKcj+0x18>

000b4e62 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4e62:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4e64:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4e66:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4e6a:	4604      	mov	r4, r0
	len = 0;
   b4e6c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4e6e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4e70:	b141      	cbz	r1, b4e84 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4e72:	4608      	mov	r0, r1
   b4e74:	9101      	str	r1, [sp, #4]
   b4e76:	f7ff f8db 	bl	b4030 <strlen>
   b4e7a:	9901      	ldr	r1, [sp, #4]
   b4e7c:	4602      	mov	r2, r0
   b4e7e:	4620      	mov	r0, r4
   b4e80:	f7ff ffd6 	bl	b4e30 <_ZN6String4copyEPKcj>
}
   b4e84:	4620      	mov	r0, r4
   b4e86:	b002      	add	sp, #8
   b4e88:	bd10      	pop	{r4, pc}

000b4e8a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4e8a:	b513      	push	{r0, r1, r4, lr}
   b4e8c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4e8e:	b159      	cbz	r1, b4ea8 <_ZN6StringaSEPKc+0x1e>
   b4e90:	4608      	mov	r0, r1
   b4e92:	9101      	str	r1, [sp, #4]
   b4e94:	f7ff f8cc 	bl	b4030 <strlen>
   b4e98:	9901      	ldr	r1, [sp, #4]
   b4e9a:	4602      	mov	r2, r0
   b4e9c:	4620      	mov	r0, r4
   b4e9e:	f7ff ffc7 	bl	b4e30 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4ea2:	4620      	mov	r0, r4
   b4ea4:	b002      	add	sp, #8
   b4ea6:	bd10      	pop	{r4, pc}
	else invalidate();
   b4ea8:	f7ff ff97 	bl	b4dda <_ZN6String10invalidateEv>
   b4eac:	e7f9      	b.n	b4ea2 <_ZN6StringaSEPKc+0x18>

000b4eae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4eae:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4eb0:	6843      	ldr	r3, [r0, #4]
   b4eb2:	3b01      	subs	r3, #1
    {
   b4eb4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4eb6:	6043      	str	r3, [r0, #4]
   b4eb8:	b963      	cbnz	r3, b4ed4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4eba:	6803      	ldr	r3, [r0, #0]
   b4ebc:	689b      	ldr	r3, [r3, #8]
   b4ebe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ec0:	68a3      	ldr	r3, [r4, #8]
   b4ec2:	3b01      	subs	r3, #1
   b4ec4:	60a3      	str	r3, [r4, #8]
   b4ec6:	b92b      	cbnz	r3, b4ed4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4ec8:	6823      	ldr	r3, [r4, #0]
   b4eca:	4620      	mov	r0, r4
   b4ecc:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4ed2:	4718      	bx	r3
    }
   b4ed4:	bd10      	pop	{r4, pc}
	...

000b4ed8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ed8:	4802      	ldr	r0, [pc, #8]	; (b4ee4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4eda:	2300      	movs	r3, #0
   b4edc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4ede:	f7ff bd91 	b.w	b4a04 <os_mutex_recursive_create>
   b4ee2:	bf00      	nop
   b4ee4:	2003e6f4 	.word	0x2003e6f4

000b4ee8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4eea:	4606      	mov	r6, r0
   b4eec:	460d      	mov	r5, r1
  size_t n = 0;
   b4eee:	188f      	adds	r7, r1, r2
   b4ef0:	2400      	movs	r4, #0
  while (size--) {
   b4ef2:	42bd      	cmp	r5, r7
   b4ef4:	d00c      	beq.n	b4f10 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4ef6:	6833      	ldr	r3, [r6, #0]
   b4ef8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4efc:	689b      	ldr	r3, [r3, #8]
   b4efe:	4630      	mov	r0, r6
   b4f00:	4798      	blx	r3
     if (chunk>=0)
   b4f02:	1e03      	subs	r3, r0, #0
   b4f04:	db01      	blt.n	b4f0a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4f06:	441c      	add	r4, r3
  while (size--) {
   b4f08:	e7f3      	b.n	b4ef2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4f0a:	2c00      	cmp	r4, #0
   b4f0c:	bf08      	it	eq
   b4f0e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4f10:	4620      	mov	r0, r4
   b4f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f14 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4f14:	b513      	push	{r0, r1, r4, lr}
   b4f16:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4f18:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4f1a:	b159      	cbz	r1, b4f34 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4f1c:	9101      	str	r1, [sp, #4]
   b4f1e:	f7ff f887 	bl	b4030 <strlen>
   b4f22:	6823      	ldr	r3, [r4, #0]
   b4f24:	9901      	ldr	r1, [sp, #4]
   b4f26:	68db      	ldr	r3, [r3, #12]
   b4f28:	4602      	mov	r2, r0
   b4f2a:	4620      	mov	r0, r4
    }
   b4f2c:	b002      	add	sp, #8
   b4f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4f32:	4718      	bx	r3
    }
   b4f34:	b002      	add	sp, #8
   b4f36:	bd10      	pop	{r4, pc}

000b4f38 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4f38:	6803      	ldr	r3, [r0, #0]
   b4f3a:	689b      	ldr	r3, [r3, #8]
   b4f3c:	4718      	bx	r3

000b4f3e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4f3e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4f40:	210d      	movs	r1, #13
{
   b4f42:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4f44:	f7ff fff8 	bl	b4f38 <_ZN5Print5printEc>
  n += print('\n');
   b4f48:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4f4a:	4604      	mov	r4, r0
  n += print('\n');
   b4f4c:	4628      	mov	r0, r5
   b4f4e:	f7ff fff3 	bl	b4f38 <_ZN5Print5printEc>
  return n;
}
   b4f52:	4420      	add	r0, r4
   b4f54:	bd38      	pop	{r3, r4, r5, pc}

000b4f56 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4f56:	b538      	push	{r3, r4, r5, lr}
   b4f58:	4605      	mov	r5, r0
  return write(str);
   b4f5a:	f7ff ffdb 	bl	b4f14 <_ZN5Print5writeEPKc>
   b4f5e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4f60:	4628      	mov	r0, r5
   b4f62:	f7ff ffec 	bl	b4f3e <_ZN5Print7printlnEv>
  return n;
}
   b4f66:	4420      	add	r0, r4
   b4f68:	bd38      	pop	{r3, r4, r5, pc}

000b4f6a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4f6a:	b530      	push	{r4, r5, lr}
   b4f6c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4f6e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4f70:	2a01      	cmp	r2, #1
  *str = '\0';
   b4f72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4f76:	bf98      	it	ls
   b4f78:	220a      	movls	r2, #10
   b4f7a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4f7c:	460d      	mov	r5, r1
   b4f7e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4f82:	fb01 5312 	mls	r3, r1, r2, r5
   b4f86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f8a:	2b09      	cmp	r3, #9
   b4f8c:	bf94      	ite	ls
   b4f8e:	3330      	addls	r3, #48	; 0x30
   b4f90:	3337      	addhi	r3, #55	; 0x37
   b4f92:	b2db      	uxtb	r3, r3
  } while(n);
   b4f94:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f96:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4f9a:	d9ef      	bls.n	b4f7c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4f9c:	4621      	mov	r1, r4
   b4f9e:	f7ff ffb9 	bl	b4f14 <_ZN5Print5writeEPKc>
}
   b4fa2:	b00b      	add	sp, #44	; 0x2c
   b4fa4:	bd30      	pop	{r4, r5, pc}

000b4fa6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4faa:	b086      	sub	sp, #24
   b4fac:	af00      	add	r7, sp, #0
   b4fae:	4605      	mov	r5, r0
   b4fb0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4fb2:	1d38      	adds	r0, r7, #4
   b4fb4:	2114      	movs	r1, #20
{
   b4fb6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4fb8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4fba:	f7ff fe97 	bl	b4cec <vsnprintf>

    if (n<bufsize)
   b4fbe:	2813      	cmp	r0, #19
   b4fc0:	d80e      	bhi.n	b4fe0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4fc2:	1d39      	adds	r1, r7, #4
   b4fc4:	4628      	mov	r0, r5
   b4fc6:	f7ff ffa5 	bl	b4f14 <_ZN5Print5writeEPKc>
   b4fca:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4fcc:	b11e      	cbz	r6, b4fd6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4fce:	4628      	mov	r0, r5
   b4fd0:	f7ff ffb5 	bl	b4f3e <_ZN5Print7printlnEv>
   b4fd4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4fd6:	4620      	mov	r0, r4
   b4fd8:	3718      	adds	r7, #24
   b4fda:	46bd      	mov	sp, r7
   b4fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4fe0:	f100 0308 	add.w	r3, r0, #8
   b4fe4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4fe8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4fea:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4fee:	4622      	mov	r2, r4
   b4ff0:	1c41      	adds	r1, r0, #1
   b4ff2:	683b      	ldr	r3, [r7, #0]
   b4ff4:	4668      	mov	r0, sp
   b4ff6:	f7ff fe79 	bl	b4cec <vsnprintf>
  return write(str);
   b4ffa:	4669      	mov	r1, sp
   b4ffc:	4628      	mov	r0, r5
   b4ffe:	f7ff ff89 	bl	b4f14 <_ZN5Print5writeEPKc>
   b5002:	4604      	mov	r4, r0
   b5004:	46c5      	mov	sp, r8
   b5006:	e7e1      	b.n	b4fcc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5008 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5008:	4b01      	ldr	r3, [pc, #4]	; (b5010 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b500a:	4a02      	ldr	r2, [pc, #8]	; (b5014 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b500c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b500e:	4770      	bx	lr
   b5010:	2003e6f8 	.word	0x2003e6f8
   b5014:	000b607c 	.word	0x000b607c

000b5018 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5018:	4b02      	ldr	r3, [pc, #8]	; (b5024 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b501a:	681a      	ldr	r2, [r3, #0]
   b501c:	4b02      	ldr	r3, [pc, #8]	; (b5028 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b501e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5020:	4770      	bx	lr
   b5022:	bf00      	nop
   b5024:	2003e610 	.word	0x2003e610
   b5028:	2003e6fc 	.word	0x2003e6fc

000b502c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b502c:	b510      	push	{r4, lr}
   b502e:	4b04      	ldr	r3, [pc, #16]	; (b5040 <_ZN9TCPClientD1Ev+0x14>)
   b5030:	6003      	str	r3, [r0, #0]
   b5032:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5034:	6980      	ldr	r0, [r0, #24]
   b5036:	b108      	cbz	r0, b503c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5038:	f7ff ff39 	bl	b4eae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b503c:	4620      	mov	r0, r4
   b503e:	bd10      	pop	{r4, pc}
   b5040:	000b614c 	.word	0x000b614c

000b5044 <_ZN9TCPClientD0Ev>:
   b5044:	b510      	push	{r4, lr}
   b5046:	4604      	mov	r4, r0
   b5048:	f7ff fff0 	bl	b502c <_ZN9TCPClientD1Ev>
   b504c:	4620      	mov	r0, r4
   b504e:	211c      	movs	r1, #28
   b5050:	f7ff f837 	bl	b40c2 <_ZdlPvj>
   b5054:	4620      	mov	r0, r4
   b5056:	bd10      	pop	{r4, pc}

000b5058 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5058:	4b01      	ldr	r3, [pc, #4]	; (b5060 <_GLOBAL__sub_I_RGB+0x8>)
   b505a:	2200      	movs	r2, #0
   b505c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b505e:	4770      	bx	lr
   b5060:	2003e700 	.word	0x2003e700

000b5064 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5064:	4b01      	ldr	r3, [pc, #4]	; (b506c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5066:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5068:	4770      	bx	lr
   b506a:	bf00      	nop
   b506c:	2003e614 	.word	0x2003e614

000b5070 <serialEventRun>:
{
   b5070:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5072:	4b0b      	ldr	r3, [pc, #44]	; (b50a0 <serialEventRun+0x30>)
   b5074:	b143      	cbz	r3, b5088 <serialEventRun+0x18>
   b5076:	f000 f97d 	bl	b5374 <_Z16_fetch_usbserialv>
   b507a:	6803      	ldr	r3, [r0, #0]
   b507c:	691b      	ldr	r3, [r3, #16]
   b507e:	4798      	blx	r3
   b5080:	2800      	cmp	r0, #0
   b5082:	dd01      	ble.n	b5088 <serialEventRun+0x18>
        serialEvent();
   b5084:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5088:	4b06      	ldr	r3, [pc, #24]	; (b50a4 <serialEventRun+0x34>)
   b508a:	b143      	cbz	r3, b509e <serialEventRun+0x2e>
   b508c:	f000 fdc2 	bl	b5c14 <_Z22__fetch_global_Serial1v>
   b5090:	6803      	ldr	r3, [r0, #0]
   b5092:	691b      	ldr	r3, [r3, #16]
   b5094:	4798      	blx	r3
   b5096:	2800      	cmp	r0, #0
   b5098:	dd01      	ble.n	b509e <serialEventRun+0x2e>
        serialEvent1();
   b509a:	f3af 8000 	nop.w
}
   b509e:	bd08      	pop	{r3, pc}
	...

000b50a8 <_post_loop>:
{
   b50a8:	b508      	push	{r3, lr}
	serialEventRun();
   b50aa:	f7ff ffe1 	bl	b5070 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b50ae:	f7ff fc89 	bl	b49c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b50b2:	4b01      	ldr	r3, [pc, #4]	; (b50b8 <_post_loop+0x10>)
   b50b4:	6018      	str	r0, [r3, #0]
}
   b50b6:	bd08      	pop	{r3, pc}
   b50b8:	2003e758 	.word	0x2003e758

000b50bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b50bc:	4805      	ldr	r0, [pc, #20]	; (b50d4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b50be:	4a06      	ldr	r2, [pc, #24]	; (b50d8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b50c0:	4906      	ldr	r1, [pc, #24]	; (b50dc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b50c2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b50c4:	1a12      	subs	r2, r2, r0
   b50c6:	f000 fee3 	bl	b5e90 <memcpy>
    __backup_sram_signature = signature;
   b50ca:	4b05      	ldr	r3, [pc, #20]	; (b50e0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b50cc:	4a05      	ldr	r2, [pc, #20]	; (b50e4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b50ce:	601a      	str	r2, [r3, #0]
}
   b50d0:	bd08      	pop	{r3, pc}
   b50d2:	bf00      	nop
   b50d4:	2003f400 	.word	0x2003f400
   b50d8:	2003f404 	.word	0x2003f404
   b50dc:	000b6448 	.word	0x000b6448
   b50e0:	2003f400 	.word	0x2003f400
   b50e4:	9a271c1e 	.word	0x9a271c1e

000b50e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b50e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b50ea:	2300      	movs	r3, #0
   b50ec:	9300      	str	r3, [sp, #0]
   b50ee:	461a      	mov	r2, r3
   b50f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b50f4:	f7ff fd68 	bl	b4bc8 <system_ctrl_set_result>
}
   b50f8:	b003      	add	sp, #12
   b50fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5100 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5100:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5102:	8843      	ldrh	r3, [r0, #2]
   b5104:	2b0a      	cmp	r3, #10
   b5106:	d008      	beq.n	b511a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5108:	2b50      	cmp	r3, #80	; 0x50
   b510a:	d10b      	bne.n	b5124 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b510c:	4b09      	ldr	r3, [pc, #36]	; (b5134 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b510e:	681b      	ldr	r3, [r3, #0]
   b5110:	b14b      	cbz	r3, b5126 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5112:	b003      	add	sp, #12
   b5114:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5118:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b511a:	f7ff ffe5 	bl	b50e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b511e:	b003      	add	sp, #12
   b5120:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5124:	2300      	movs	r3, #0
   b5126:	9300      	str	r3, [sp, #0]
   b5128:	461a      	mov	r2, r3
   b512a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b512e:	f7ff fd4b 	bl	b4bc8 <system_ctrl_set_result>
}
   b5132:	e7f4      	b.n	b511e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5134:	2003e714 	.word	0x2003e714

000b5138 <module_user_init_hook>:
{
   b5138:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b513a:	4812      	ldr	r0, [pc, #72]	; (b5184 <module_user_init_hook+0x4c>)
   b513c:	2100      	movs	r1, #0
   b513e:	f7ff fded 	bl	b4d1c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5142:	4b11      	ldr	r3, [pc, #68]	; (b5188 <module_user_init_hook+0x50>)
   b5144:	681a      	ldr	r2, [r3, #0]
   b5146:	4b11      	ldr	r3, [pc, #68]	; (b518c <module_user_init_hook+0x54>)
   b5148:	429a      	cmp	r2, r3
   b514a:	4b11      	ldr	r3, [pc, #68]	; (b5190 <module_user_init_hook+0x58>)
   b514c:	bf0c      	ite	eq
   b514e:	2201      	moveq	r2, #1
   b5150:	2200      	movne	r2, #0
   b5152:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5154:	d001      	beq.n	b515a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5156:	f7ff ffb1 	bl	b50bc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b515a:	f7ff fc2b 	bl	b49b4 <HAL_RNG_GetRandomNumber>
   b515e:	4604      	mov	r4, r0
    srand(seed);
   b5160:	f000 feac 	bl	b5ebc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5164:	4b0b      	ldr	r3, [pc, #44]	; (b5194 <module_user_init_hook+0x5c>)
   b5166:	b113      	cbz	r3, b516e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5168:	4620      	mov	r0, r4
   b516a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b516e:	2100      	movs	r1, #0
   b5170:	4808      	ldr	r0, [pc, #32]	; (b5194 <module_user_init_hook+0x5c>)
   b5172:	f7ff fd9b 	bl	b4cac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b517a:	4807      	ldr	r0, [pc, #28]	; (b5198 <module_user_init_hook+0x60>)
   b517c:	2100      	movs	r1, #0
   b517e:	f7ff bd19 	b.w	b4bb4 <system_ctrl_set_app_request_handler>
   b5182:	bf00      	nop
   b5184:	000b5065 	.word	0x000b5065
   b5188:	2003f400 	.word	0x2003f400
   b518c:	9a271c1e 	.word	0x9a271c1e
   b5190:	2003e710 	.word	0x2003e710
   b5194:	00000000 	.word	0x00000000
   b5198:	000b5101 	.word	0x000b5101

000b519c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b519c:	4770      	bx	lr

000b519e <_ZN9IPAddressD0Ev>:
   b519e:	b510      	push	{r4, lr}
   b51a0:	2118      	movs	r1, #24
   b51a2:	4604      	mov	r4, r0
   b51a4:	f7fe ff8d 	bl	b40c2 <_ZdlPvj>
   b51a8:	4620      	mov	r0, r4
   b51aa:	bd10      	pop	{r4, pc}

000b51ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b51ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b51ae:	7d03      	ldrb	r3, [r0, #20]
   b51b0:	2b06      	cmp	r3, #6
{
   b51b2:	b08d      	sub	sp, #52	; 0x34
   b51b4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b51b6:	f100 0704 	add.w	r7, r0, #4
   b51ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b51be:	d012      	beq.n	b51e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b51c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b51c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b51c8:	220a      	movs	r2, #10
   b51ca:	4630      	mov	r0, r6
   b51cc:	f7ff fecd 	bl	b4f6a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b51d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b51d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b51d4:	d019      	beq.n	b520a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b51d6:	2c00      	cmp	r4, #0
   b51d8:	d0f4      	beq.n	b51c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b51da:	212e      	movs	r1, #46	; 0x2e
   b51dc:	4630      	mov	r0, r6
   b51de:	f7ff feab 	bl	b4f38 <_ZN5Print5printEc>
   b51e2:	4404      	add	r4, r0
   b51e4:	e7ee      	b.n	b51c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b51e6:	232f      	movs	r3, #47	; 0x2f
   b51e8:	466a      	mov	r2, sp
   b51ea:	4639      	mov	r1, r7
   b51ec:	200a      	movs	r0, #10
		buf[0] = 0;
   b51ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b51f2:	f7ff fc0f 	bl	b4a14 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b51f6:	4668      	mov	r0, sp
   b51f8:	f7fe ff1a 	bl	b4030 <strlen>
   b51fc:	6833      	ldr	r3, [r6, #0]
   b51fe:	4602      	mov	r2, r0
   b5200:	68db      	ldr	r3, [r3, #12]
   b5202:	4669      	mov	r1, sp
   b5204:	4630      	mov	r0, r6
   b5206:	4798      	blx	r3
   b5208:	4604      	mov	r4, r0
    }
    return n;
}
   b520a:	4620      	mov	r0, r4
   b520c:	b00d      	add	sp, #52	; 0x34
   b520e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5210 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5210:	b510      	push	{r4, lr}
   b5212:	4b05      	ldr	r3, [pc, #20]	; (b5228 <_ZN9IPAddressC1Ev+0x18>)
   b5214:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5216:	2211      	movs	r2, #17
   b5218:	f840 3b04 	str.w	r3, [r0], #4
   b521c:	2100      	movs	r1, #0
   b521e:	f000 fe45 	bl	b5eac <memset>
}
   b5222:	4620      	mov	r0, r4
   b5224:	bd10      	pop	{r4, pc}
   b5226:	bf00      	nop
   b5228:	000b60a4 	.word	0x000b60a4

000b522c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b522c:	4603      	mov	r3, r0
   b522e:	4a07      	ldr	r2, [pc, #28]	; (b524c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5230:	b510      	push	{r4, lr}
   b5232:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5236:	f101 0210 	add.w	r2, r1, #16
   b523a:	f851 4b04 	ldr.w	r4, [r1], #4
   b523e:	f843 4b04 	str.w	r4, [r3], #4
   b5242:	4291      	cmp	r1, r2
   b5244:	d1f9      	bne.n	b523a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5246:	780a      	ldrb	r2, [r1, #0]
   b5248:	701a      	strb	r2, [r3, #0]
}
   b524a:	bd10      	pop	{r4, pc}
   b524c:	000b60a4 	.word	0x000b60a4

000b5250 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5250:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5252:	2b04      	cmp	r3, #4
   b5254:	d104      	bne.n	b5260 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5256:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5258:	3800      	subs	r0, #0
   b525a:	bf18      	it	ne
   b525c:	2001      	movne	r0, #1
   b525e:	4770      	bx	lr
    } else if (version() == 6) {
   b5260:	2b06      	cmp	r3, #6
   b5262:	d107      	bne.n	b5274 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5264:	6843      	ldr	r3, [r0, #4]
   b5266:	b93b      	cbnz	r3, b5278 <_ZNK9IPAddresscvbEv+0x28>
   b5268:	6883      	ldr	r3, [r0, #8]
   b526a:	b92b      	cbnz	r3, b5278 <_ZNK9IPAddresscvbEv+0x28>
   b526c:	68c3      	ldr	r3, [r0, #12]
   b526e:	b91b      	cbnz	r3, b5278 <_ZNK9IPAddresscvbEv+0x28>
   b5270:	6900      	ldr	r0, [r0, #16]
   b5272:	e7f1      	b.n	b5258 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5274:	2000      	movs	r0, #0
   b5276:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5278:	2001      	movs	r0, #1
}
   b527a:	4770      	bx	lr

000b527c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b527c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b527e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5282:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5286:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b528a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b528e:	2304      	movs	r3, #4
   b5290:	6041      	str	r1, [r0, #4]
   b5292:	7503      	strb	r3, [r0, #20]
}
   b5294:	bd10      	pop	{r4, pc}
	...

000b5298 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5298:	b507      	push	{r0, r1, r2, lr}
   b529a:	4b06      	ldr	r3, [pc, #24]	; (b52b4 <_ZN9IPAddressC1EPKh+0x1c>)
   b529c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b529e:	78cb      	ldrb	r3, [r1, #3]
   b52a0:	9300      	str	r3, [sp, #0]
   b52a2:	788b      	ldrb	r3, [r1, #2]
   b52a4:	784a      	ldrb	r2, [r1, #1]
   b52a6:	7809      	ldrb	r1, [r1, #0]
   b52a8:	f7ff ffe8 	bl	b527c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b52ac:	b003      	add	sp, #12
   b52ae:	f85d fb04 	ldr.w	pc, [sp], #4
   b52b2:	bf00      	nop
   b52b4:	000b60a4 	.word	0x000b60a4

000b52b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b52b8:	7441      	strb	r1, [r0, #17]
}
   b52ba:	4770      	bx	lr

000b52bc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52bc:	4770      	bx	lr

000b52be <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b52be:	4770      	bx	lr

000b52c0 <_ZN9USBSerial4readEv>:
{
   b52c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b52c2:	2100      	movs	r1, #0
   b52c4:	7c00      	ldrb	r0, [r0, #16]
   b52c6:	f7ff fc45 	bl	b4b54 <HAL_USB_USART_Receive_Data>
}
   b52ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b52ce:	bd08      	pop	{r3, pc}

000b52d0 <_ZN9USBSerial4peekEv>:
{
   b52d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b52d2:	2101      	movs	r1, #1
   b52d4:	7c00      	ldrb	r0, [r0, #16]
   b52d6:	f7ff fc3d 	bl	b4b54 <HAL_USB_USART_Receive_Data>
}
   b52da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b52de:	bd08      	pop	{r3, pc}

000b52e0 <_ZN9USBSerial17availableForWriteEv>:
{
   b52e0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b52e2:	7c00      	ldrb	r0, [r0, #16]
   b52e4:	f7ff fc2e 	bl	b4b44 <HAL_USB_USART_Available_Data_For_Write>
}
   b52e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b52ec:	bd08      	pop	{r3, pc}

000b52ee <_ZN9USBSerial9availableEv>:
{
   b52ee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b52f0:	7c00      	ldrb	r0, [r0, #16]
   b52f2:	f7ff fc1f 	bl	b4b34 <HAL_USB_USART_Available_Data>
}
   b52f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b52fa:	bd08      	pop	{r3, pc}

000b52fc <_ZN9USBSerial5writeEh>:
{
   b52fc:	b513      	push	{r0, r1, r4, lr}
   b52fe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5300:	7c00      	ldrb	r0, [r0, #16]
{
   b5302:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5304:	f7ff fc1e 	bl	b4b44 <HAL_USB_USART_Available_Data_For_Write>
   b5308:	2800      	cmp	r0, #0
   b530a:	9901      	ldr	r1, [sp, #4]
   b530c:	dc01      	bgt.n	b5312 <_ZN9USBSerial5writeEh+0x16>
   b530e:	7c60      	ldrb	r0, [r4, #17]
   b5310:	b120      	cbz	r0, b531c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5312:	7c20      	ldrb	r0, [r4, #16]
   b5314:	f7ff fc26 	bl	b4b64 <HAL_USB_USART_Send_Data>
   b5318:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b531c:	b002      	add	sp, #8
   b531e:	bd10      	pop	{r4, pc}

000b5320 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5320:	7c00      	ldrb	r0, [r0, #16]
   b5322:	f7ff bc27 	b.w	b4b74 <HAL_USB_USART_Flush_Data>

000b5326 <_ZN9USBSerialD0Ev>:
   b5326:	b510      	push	{r4, lr}
   b5328:	2114      	movs	r1, #20
   b532a:	4604      	mov	r4, r0
   b532c:	f7fe fec9 	bl	b40c2 <_ZdlPvj>
   b5330:	4620      	mov	r0, r4
   b5332:	bd10      	pop	{r4, pc}

000b5334 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5334:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b533a:	4604      	mov	r4, r0
   b533c:	4608      	mov	r0, r1
   b533e:	2100      	movs	r1, #0
   b5340:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5344:	4b04      	ldr	r3, [pc, #16]	; (b5358 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5346:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5348:	2301      	movs	r3, #1
  _serial = serial;
   b534a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b534c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b534e:	4611      	mov	r1, r2
   b5350:	f7ff fbe0 	bl	b4b14 <HAL_USB_USART_Init>
}
   b5354:	4620      	mov	r0, r4
   b5356:	bd10      	pop	{r4, pc}
   b5358:	000b60b8 	.word	0x000b60b8

000b535c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b535c:	7c00      	ldrb	r0, [r0, #16]
   b535e:	2200      	movs	r2, #0
   b5360:	f7ff bbe0 	b.w	b4b24 <HAL_USB_USART_Begin>

000b5364 <_Z19acquireSerialBufferv>:
{
   b5364:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5366:	2214      	movs	r2, #20
{
   b5368:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b536a:	2100      	movs	r1, #0
   b536c:	f000 fd9e 	bl	b5eac <memset>
}
   b5370:	4620      	mov	r0, r4
   b5372:	bd10      	pop	{r4, pc}

000b5374 <_Z16_fetch_usbserialv>:
{
   b5374:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5376:	4c0f      	ldr	r4, [pc, #60]	; (b53b4 <_Z16_fetch_usbserialv+0x40>)
{
   b5378:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b537a:	a803      	add	r0, sp, #12
   b537c:	f7ff fff2 	bl	b5364 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5380:	7821      	ldrb	r1, [r4, #0]
   b5382:	f3bf 8f5b 	dmb	ish
   b5386:	f011 0101 	ands.w	r1, r1, #1
   b538a:	d10f      	bne.n	b53ac <_Z16_fetch_usbserialv+0x38>
   b538c:	4620      	mov	r0, r4
   b538e:	9101      	str	r1, [sp, #4]
   b5390:	f7fe fe99 	bl	b40c6 <__cxa_guard_acquire>
   b5394:	9901      	ldr	r1, [sp, #4]
   b5396:	b148      	cbz	r0, b53ac <_Z16_fetch_usbserialv+0x38>
   b5398:	aa03      	add	r2, sp, #12
   b539a:	4807      	ldr	r0, [pc, #28]	; (b53b8 <_Z16_fetch_usbserialv+0x44>)
   b539c:	f7ff ffca 	bl	b5334 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b53a0:	4620      	mov	r0, r4
   b53a2:	f7fe fe95 	bl	b40d0 <__cxa_guard_release>
   b53a6:	4805      	ldr	r0, [pc, #20]	; (b53bc <_Z16_fetch_usbserialv+0x48>)
   b53a8:	f000 fd6c 	bl	b5e84 <atexit>
	return _usbserial;
}
   b53ac:	4802      	ldr	r0, [pc, #8]	; (b53b8 <_Z16_fetch_usbserialv+0x44>)
   b53ae:	b008      	add	sp, #32
   b53b0:	bd10      	pop	{r4, pc}
   b53b2:	bf00      	nop
   b53b4:	2003e718 	.word	0x2003e718
   b53b8:	2003e71c 	.word	0x2003e71c
   b53bc:	000b52bd 	.word	0x000b52bd

000b53c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b53c0:	4770      	bx	lr

000b53c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b53c2:	7441      	strb	r1, [r0, #17]
}
   b53c4:	4770      	bx	lr

000b53c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b53c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b53c8:	7c00      	ldrb	r0, [r0, #16]
   b53ca:	f7ff fb63 	bl	b4a94 <hal_usart_available_data_for_write>
}
   b53ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b53d2:	bd08      	pop	{r3, pc}

000b53d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b53d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b53d6:	7c00      	ldrb	r0, [r0, #16]
   b53d8:	f7ff fb3c 	bl	b4a54 <hal_usart_available>
}
   b53dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b53e0:	bd08      	pop	{r3, pc}

000b53e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b53e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b53e4:	7c00      	ldrb	r0, [r0, #16]
   b53e6:	f7ff fb45 	bl	b4a74 <hal_usart_peek>
}
   b53ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b53ee:	bd08      	pop	{r3, pc}

000b53f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b53f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b53f2:	7c00      	ldrb	r0, [r0, #16]
   b53f4:	f7ff fb36 	bl	b4a64 <hal_usart_read>
}
   b53f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b53fc:	bd08      	pop	{r3, pc}

000b53fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b53fe:	7c00      	ldrb	r0, [r0, #16]
   b5400:	f7ff bb40 	b.w	b4a84 <hal_usart_flush>

000b5404 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5404:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5406:	7c45      	ldrb	r5, [r0, #17]
{
   b5408:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b540a:	b12d      	cbz	r5, b5418 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b540c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b540e:	b003      	add	sp, #12
   b5410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5414:	f7ff bb16 	b.w	b4a44 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5418:	7c00      	ldrb	r0, [r0, #16]
   b541a:	9101      	str	r1, [sp, #4]
   b541c:	f7ff fb3a 	bl	b4a94 <hal_usart_available_data_for_write>
   b5420:	2800      	cmp	r0, #0
   b5422:	9901      	ldr	r1, [sp, #4]
   b5424:	dcf2      	bgt.n	b540c <_ZN11USARTSerial5writeEh+0x8>
}
   b5426:	4628      	mov	r0, r5
   b5428:	b003      	add	sp, #12
   b542a:	bd30      	pop	{r4, r5, pc}

000b542c <_ZN11USARTSerialD0Ev>:
   b542c:	b510      	push	{r4, lr}
   b542e:	2114      	movs	r1, #20
   b5430:	4604      	mov	r4, r0
   b5432:	f7fe fe46 	bl	b40c2 <_ZdlPvj>
   b5436:	4620      	mov	r0, r4
   b5438:	bd10      	pop	{r4, pc}
	...

000b543c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b543c:	b510      	push	{r4, lr}
   b543e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5442:	4604      	mov	r4, r0
   b5444:	4608      	mov	r0, r1
   b5446:	4611      	mov	r1, r2
   b5448:	2200      	movs	r2, #0
   b544a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b544e:	4b04      	ldr	r3, [pc, #16]	; (b5460 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5450:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5452:	2301      	movs	r3, #1
  _serial = serial;
   b5454:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5456:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5458:	f7ff fb24 	bl	b4aa4 <hal_usart_init_ex>
}
   b545c:	4620      	mov	r0, r4
   b545e:	bd10      	pop	{r4, pc}
   b5460:	000b60e8 	.word	0x000b60e8

000b5464 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5464:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5466:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5468:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b546c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b546e:	2201      	movs	r2, #1
   b5470:	f04f 33ff 	mov.w	r3, #4294967295
   b5474:	f10d 0107 	add.w	r1, sp, #7
   b5478:	47a0      	blx	r4
}
   b547a:	b002      	add	sp, #8
   b547c:	bd10      	pop	{r4, pc}

000b547e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b547e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5480:	6803      	ldr	r3, [r0, #0]
   b5482:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5484:	f04f 33ff 	mov.w	r3, #4294967295
   b5488:	46a4      	mov	ip, r4
}
   b548a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b548e:	4760      	bx	ip

000b5490 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5490:	b513      	push	{r0, r1, r4, lr}
   b5492:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5494:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5496:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b549a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b549c:	f10d 0107 	add.w	r1, sp, #7
   b54a0:	2201      	movs	r2, #1
   b54a2:	47a0      	blx	r4
}
   b54a4:	b002      	add	sp, #8
   b54a6:	bd10      	pop	{r4, pc}

000b54a8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b54a8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b54aa:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b54ac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b54b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b54b4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b54b6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b54b8:	d008      	beq.n	b54cc <_ZN9TCPClient4readEv+0x24>
   b54ba:	6963      	ldr	r3, [r4, #20]
   b54bc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b54c0:	1c51      	adds	r1, r2, #1
   b54c2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b54c6:	4413      	add	r3, r2
   b54c8:	7918      	ldrb	r0, [r3, #4]
}
   b54ca:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b54cc:	6803      	ldr	r3, [r0, #0]
   b54ce:	691b      	ldr	r3, [r3, #16]
   b54d0:	4798      	blx	r3
   b54d2:	2800      	cmp	r0, #0
   b54d4:	d1f1      	bne.n	b54ba <_ZN9TCPClient4readEv+0x12>
   b54d6:	f04f 30ff 	mov.w	r0, #4294967295
   b54da:	e7f6      	b.n	b54ca <_ZN9TCPClient4readEv+0x22>

000b54dc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b54dc:	4770      	bx	lr

000b54de <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b54de:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b54e0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b54e2:	43c0      	mvns	r0, r0
   b54e4:	0fc0      	lsrs	r0, r0, #31
   b54e6:	4770      	bx	lr

000b54e8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b54e8:	4770      	bx	lr
	...

000b54ec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b54ec:	4b06      	ldr	r3, [pc, #24]	; (b5508 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b54ee:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b54f0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b54f2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b54f6:	d005      	beq.n	b5504 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b54f8:	4608      	mov	r0, r1
   b54fa:	f000 fbb1 	bl	b5c60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b54fe:	2800      	cmp	r0, #0
   b5500:	bf08      	it	eq
   b5502:	2400      	moveq	r4, #0
      }
   b5504:	4620      	mov	r0, r4
   b5506:	bd10      	pop	{r4, pc}
   b5508:	000b6074 	.word	0x000b6074

000b550c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b550c:	b510      	push	{r4, lr}
   b550e:	21ac      	movs	r1, #172	; 0xac
   b5510:	4604      	mov	r4, r0
   b5512:	f7fe fdd6 	bl	b40c2 <_ZdlPvj>
   b5516:	4620      	mov	r0, r4
   b5518:	bd10      	pop	{r4, pc}

000b551a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b551a:	21ac      	movs	r1, #172	; 0xac
   b551c:	f7fe bdd1 	b.w	b40c2 <_ZdlPvj>

000b5520 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5524:	f04f 0800 	mov.w	r8, #0
   b5528:	b086      	sub	sp, #24
   b552a:	461c      	mov	r4, r3
   b552c:	f8c0 8004 	str.w	r8, [r0, #4]
   b5530:	4605      	mov	r5, r0
   b5532:	460e      	mov	r6, r1
   b5534:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5536:	4641      	mov	r1, r8
   b5538:	2210      	movs	r2, #16
   b553a:	a802      	add	r0, sp, #8
   b553c:	f000 fcb6 	bl	b5eac <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5540:	1c63      	adds	r3, r4, #1
   b5542:	d009      	beq.n	b5558 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5548:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b554c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5550:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5554:	435c      	muls	r4, r3
   b5556:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5558:	6968      	ldr	r0, [r5, #20]
   b555a:	2310      	movs	r3, #16
   b555c:	9300      	str	r3, [sp, #0]
   b555e:	6800      	ldr	r0, [r0, #0]
   b5560:	ab02      	add	r3, sp, #8
   b5562:	f241 0205 	movw	r2, #4101	; 0x1005
   b5566:	f640 71ff 	movw	r1, #4095	; 0xfff
   b556a:	f7ff faa3 	bl	b4ab4 <sock_setsockopt>
    if (ret < 0) {
   b556e:	2800      	cmp	r0, #0
   b5570:	da07      	bge.n	b5582 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5572:	f7ff fbc3 	bl	b4cfc <__errno>
   b5576:	6803      	ldr	r3, [r0, #0]
   b5578:	606b      	str	r3, [r5, #4]
        return 0;
   b557a:	2000      	movs	r0, #0
}
   b557c:	b006      	add	sp, #24
   b557e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5582:	6968      	ldr	r0, [r5, #20]
   b5584:	2300      	movs	r3, #0
   b5586:	6800      	ldr	r0, [r0, #0]
   b5588:	463a      	mov	r2, r7
   b558a:	4631      	mov	r1, r6
   b558c:	f7ff fab2 	bl	b4af4 <sock_send>
    if (ret < 0) {
   b5590:	1e03      	subs	r3, r0, #0
   b5592:	dbee      	blt.n	b5572 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5594:	4618      	mov	r0, r3
   b5596:	e7f1      	b.n	b557c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5598 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5598:	b530      	push	{r4, r5, lr}
   b559a:	b087      	sub	sp, #28
   b559c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b559e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b55a0:	4668      	mov	r0, sp
   b55a2:	f7ff fe79 	bl	b5298 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b55a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55a8:	3404      	adds	r4, #4
   b55aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55ac:	682b      	ldr	r3, [r5, #0]
   b55ae:	7023      	strb	r3, [r4, #0]
    }
   b55b0:	b007      	add	sp, #28
   b55b2:	bd30      	pop	{r4, r5, pc}

000b55b4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b55b4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b55b6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b55b8:	4b05      	ldr	r3, [pc, #20]	; (b55d0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b55ba:	4604      	mov	r4, r0
   b55bc:	358c      	adds	r5, #140	; 0x8c
   b55be:	f844 3b04 	str.w	r3, [r4], #4
   b55c2:	4606      	mov	r6, r0
   b55c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55c8:	682b      	ldr	r3, [r5, #0]
   b55ca:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b55cc:	4630      	mov	r0, r6
   b55ce:	bd70      	pop	{r4, r5, r6, pc}
   b55d0:	000b60a4 	.word	0x000b60a4

000b55d4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b55d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b55d8:	4698      	mov	r8, r3
    stop();
   b55da:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b55dc:	b093      	sub	sp, #76	; 0x4c
   b55de:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b55e0:	2400      	movs	r4, #0
    stop();
   b55e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b55e4:	4606      	mov	r6, r0
   b55e6:	4617      	mov	r7, r2
    stop();
   b55e8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b55ea:	4628      	mov	r0, r5
   b55ec:	466b      	mov	r3, sp
   b55ee:	4622      	mov	r2, r4
   b55f0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b55f2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b55f4:	f7ff f9ce 	bl	b4994 <netdb_getaddrinfo>
   b55f8:	4605      	mov	r5, r0
   b55fa:	2800      	cmp	r0, #0
   b55fc:	d163      	bne.n	b56c6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b55fe:	9b00      	ldr	r3, [sp, #0]
   b5600:	2b00      	cmp	r3, #0
   b5602:	d04b      	beq.n	b569c <_ZN9TCPClient7connectEPKctm+0xc8>
   b5604:	695b      	ldr	r3, [r3, #20]
   b5606:	2b00      	cmp	r3, #0
   b5608:	d048      	beq.n	b569c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b560a:	a806      	add	r0, sp, #24
   b560c:	f7ff fe00 	bl	b5210 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5610:	9b00      	ldr	r3, [sp, #0]
   b5612:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5614:	7863      	ldrb	r3, [r4, #1]
   b5616:	2b02      	cmp	r3, #2
   b5618:	d104      	bne.n	b5624 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b561a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b561c:	a806      	add	r0, sp, #24
   b561e:	f7ff ffbb 	bl	b5598 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5622:	e026      	b.n	b5672 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5624:	2b0a      	cmp	r3, #10
   b5626:	d124      	bne.n	b5672 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5628:	2211      	movs	r2, #17
   b562a:	4629      	mov	r1, r5
   b562c:	a801      	add	r0, sp, #4
   b562e:	f000 fc3d 	bl	b5eac <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5632:	68a3      	ldr	r3, [r4, #8]
   b5634:	2b00      	cmp	r3, #0
   b5636:	d038      	beq.n	b56aa <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5638:	f104 0308 	add.w	r3, r4, #8
   b563c:	f10d 0c04 	add.w	ip, sp, #4
   b5640:	3418      	adds	r4, #24
   b5642:	6818      	ldr	r0, [r3, #0]
   b5644:	6859      	ldr	r1, [r3, #4]
   b5646:	4662      	mov	r2, ip
   b5648:	c203      	stmia	r2!, {r0, r1}
   b564a:	3308      	adds	r3, #8
   b564c:	42a3      	cmp	r3, r4
   b564e:	4694      	mov	ip, r2
   b5650:	d1f7      	bne.n	b5642 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5652:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5654:	a901      	add	r1, sp, #4
   b5656:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5658:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b565c:	f7ff fde6 	bl	b522c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5660:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5664:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5668:	ac07      	add	r4, sp, #28
   b566a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b566c:	f8dc 3000 	ldr.w	r3, [ip]
   b5670:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5672:	a806      	add	r0, sp, #24
   b5674:	f7ff fdec 	bl	b5250 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5678:	b180      	cbz	r0, b569c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b567a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b567c:	ad07      	add	r5, sp, #28
   b567e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5682:	4b12      	ldr	r3, [pc, #72]	; (b56cc <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5684:	930c      	str	r3, [sp, #48]	; 0x30
   b5686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5688:	ac0d      	add	r4, sp, #52	; 0x34
   b568a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b568c:	682b      	ldr	r3, [r5, #0]
   b568e:	7023      	strb	r3, [r4, #0]
   b5690:	463a      	mov	r2, r7
   b5692:	4643      	mov	r3, r8
   b5694:	a90c      	add	r1, sp, #48	; 0x30
   b5696:	4630      	mov	r0, r6
   b5698:	47c8      	blx	r9
   b569a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b569c:	9800      	ldr	r0, [sp, #0]
   b569e:	f7ff f971 	bl	b4984 <netdb_freeaddrinfo>
}
   b56a2:	4628      	mov	r0, r5
   b56a4:	b013      	add	sp, #76	; 0x4c
   b56a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b56aa:	68e3      	ldr	r3, [r4, #12]
   b56ac:	2b00      	cmp	r3, #0
   b56ae:	d1c3      	bne.n	b5638 <_ZN9TCPClient7connectEPKctm+0x64>
   b56b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b56b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b56b8:	f7ff f9b4 	bl	b4a24 <inet_htonl>
   b56bc:	4581      	cmp	r9, r0
   b56be:	d1bb      	bne.n	b5638 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b56c0:	f104 0114 	add.w	r1, r4, #20
   b56c4:	e7aa      	b.n	b561c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b56c6:	4625      	mov	r5, r4
   b56c8:	e7e8      	b.n	b569c <_ZN9TCPClient7connectEPKctm+0xc8>
   b56ca:	bf00      	nop
   b56cc:	000b60a4 	.word	0x000b60a4

000b56d0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b56d0:	b538      	push	{r3, r4, r5, lr}
   b56d2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b56d4:	681a      	ldr	r2, [r3, #0]
   b56d6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b56d8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b56da:	da10      	bge.n	b56fe <_ZN9TCPClient9connectedEv+0x2e>
   b56dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b56e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b56e4:	429a      	cmp	r2, r3
   b56e6:	d10a      	bne.n	b56fe <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b56e8:	6803      	ldr	r3, [r0, #0]
   b56ea:	691b      	ldr	r3, [r3, #16]
   b56ec:	4798      	blx	r3
        if (!rv) {
   b56ee:	4604      	mov	r4, r0
   b56f0:	b928      	cbnz	r0, b56fe <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b56f2:	682b      	ldr	r3, [r5, #0]
   b56f4:	4628      	mov	r0, r5
   b56f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56f8:	4798      	blx	r3
        rv = available();
   b56fa:	4620      	mov	r0, r4
}
   b56fc:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b56fe:	2001      	movs	r0, #1
   b5700:	e7fc      	b.n	b56fc <_ZN9TCPClient9connectedEv+0x2c>

000b5702 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5702:	b510      	push	{r4, lr}
   b5704:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5706:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b570a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b570e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5710:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5712:	d005      	beq.n	b5720 <_ZN9TCPClient4peekEv+0x1e>
   b5714:	6963      	ldr	r3, [r4, #20]
   b5716:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b571a:	4413      	add	r3, r2
   b571c:	7918      	ldrb	r0, [r3, #4]
}
   b571e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5720:	6803      	ldr	r3, [r0, #0]
   b5722:	691b      	ldr	r3, [r3, #16]
   b5724:	4798      	blx	r3
   b5726:	2800      	cmp	r0, #0
   b5728:	d1f4      	bne.n	b5714 <_ZN9TCPClient4peekEv+0x12>
   b572a:	f04f 30ff 	mov.w	r0, #4294967295
   b572e:	e7f6      	b.n	b571e <_ZN9TCPClient4peekEv+0x1c>

000b5730 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5732:	6943      	ldr	r3, [r0, #20]
   b5734:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5736:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b573a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b573e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5740:	4605      	mov	r5, r0
   b5742:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5744:	d016      	beq.n	b5774 <_ZN9TCPClient4readEPhj+0x44>
   b5746:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5748:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b574c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5750:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5752:	42bc      	cmp	r4, r7
   b5754:	bf28      	it	cs
   b5756:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5758:	3304      	adds	r3, #4
   b575a:	4622      	mov	r2, r4
   b575c:	4419      	add	r1, r3
   b575e:	4630      	mov	r0, r6
   b5760:	f000 fb96 	bl	b5e90 <memcpy>
   b5764:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5766:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b576a:	4423      	add	r3, r4
   b576c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5770:	4620      	mov	r0, r4
   b5772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5774:	6803      	ldr	r3, [r0, #0]
   b5776:	691b      	ldr	r3, [r3, #16]
   b5778:	4798      	blx	r3
   b577a:	2800      	cmp	r0, #0
   b577c:	d1e3      	bne.n	b5746 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b577e:	f04f 34ff 	mov.w	r4, #4294967295
   b5782:	e7f5      	b.n	b5770 <_ZN9TCPClient4readEPhj+0x40>

000b5784 <_ZN9TCPClient12flush_bufferEv>:
   b5784:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5786:	2300      	movs	r3, #0
   b5788:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b578c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b578e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5792:	4770      	bx	lr

000b5794 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5798:	461f      	mov	r7, r3
    stop();
   b579a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b579c:	460c      	mov	r4, r1
    stop();
   b579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b57a0:	b08a      	sub	sp, #40	; 0x28
   b57a2:	4605      	mov	r5, r0
   b57a4:	4616      	mov	r6, r2
    stop();
   b57a6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b57a8:	7d23      	ldrb	r3, [r4, #20]
   b57aa:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b57ae:	2b04      	cmp	r3, #4
   b57b0:	bf0c      	ite	eq
   b57b2:	2002      	moveq	r0, #2
   b57b4:	200a      	movne	r0, #10
   b57b6:	2206      	movs	r2, #6
   b57b8:	2101      	movs	r1, #1
   b57ba:	f7ff f9a3 	bl	b4b04 <sock_socket>
   b57be:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b57c2:	696b      	ldr	r3, [r5, #20]
   b57c4:	681b      	ldr	r3, [r3, #0]
   b57c6:	2b00      	cmp	r3, #0
   b57c8:	da08      	bge.n	b57dc <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b57ca:	682b      	ldr	r3, [r5, #0]
   b57cc:	4628      	mov	r0, r5
   b57ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b57d0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b57d2:	4798      	blx	r3
}
   b57d4:	4620      	mov	r0, r4
   b57d6:	b00a      	add	sp, #40	; 0x28
   b57d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b57dc:	4628      	mov	r0, r5
   b57de:	f7ff ffd1 	bl	b5784 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b57e2:	b1b7      	cbz	r7, b5812 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b57e4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b57e6:	a903      	add	r1, sp, #12
   b57e8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b57ea:	9303      	str	r3, [sp, #12]
   b57ec:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b57f0:	f7ff f8d8 	bl	b49a4 <if_index_to_name>
   b57f4:	2800      	cmp	r0, #0
   b57f6:	d1e8      	bne.n	b57ca <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b57f8:	6968      	ldr	r0, [r5, #20]
   b57fa:	2306      	movs	r3, #6
   b57fc:	9300      	str	r3, [sp, #0]
   b57fe:	6800      	ldr	r0, [r0, #0]
   b5800:	ab03      	add	r3, sp, #12
   b5802:	f241 020b 	movw	r2, #4107	; 0x100b
   b5806:	f640 71ff 	movw	r1, #4095	; 0xfff
   b580a:	f7ff f953 	bl	b4ab4 <sock_setsockopt>
   b580e:	2800      	cmp	r0, #0
   b5810:	d1db      	bne.n	b57ca <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5812:	221c      	movs	r2, #28
   b5814:	2100      	movs	r1, #0
   b5816:	a803      	add	r0, sp, #12
   b5818:	f000 fb48 	bl	b5eac <memset>
    if (ip.version() == 4) {
   b581c:	7d23      	ldrb	r3, [r4, #20]
   b581e:	2b04      	cmp	r3, #4
   b5820:	d11d      	bne.n	b585e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5822:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5826:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5828:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b582c:	f7ff f902 	bl	b4a34 <inet_htons>
   b5830:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5834:	6860      	ldr	r0, [r4, #4]
   b5836:	f7ff f8f5 	bl	b4a24 <inet_htonl>
   b583a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b583c:	696b      	ldr	r3, [r5, #20]
   b583e:	221c      	movs	r2, #28
   b5840:	6818      	ldr	r0, [r3, #0]
   b5842:	a903      	add	r1, sp, #12
   b5844:	f7ff f946 	bl	b4ad4 <sock_connect>
   b5848:	2800      	cmp	r0, #0
   b584a:	d1be      	bne.n	b57ca <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b584c:	3404      	adds	r4, #4
   b584e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5850:	696d      	ldr	r5, [r5, #20]
   b5852:	358c      	adds	r5, #140	; 0x8c
   b5854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5856:	6823      	ldr	r3, [r4, #0]
   b5858:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b585a:	2401      	movs	r4, #1
   b585c:	e7ba      	b.n	b57d4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b585e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5862:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5864:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5868:	f7ff f8e4 	bl	b4a34 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b586c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b586e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5872:	1d23      	adds	r3, r4, #4
   b5874:	f104 0714 	add.w	r7, r4, #20
   b5878:	6818      	ldr	r0, [r3, #0]
   b587a:	6859      	ldr	r1, [r3, #4]
   b587c:	4632      	mov	r2, r6
   b587e:	c203      	stmia	r2!, {r0, r1}
   b5880:	3308      	adds	r3, #8
   b5882:	42bb      	cmp	r3, r7
   b5884:	4616      	mov	r6, r2
   b5886:	d1f7      	bne.n	b5878 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5888:	e7d8      	b.n	b583c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b588c <_ZN9TCPClient9availableEv>:
{
   b588c:	b530      	push	{r4, r5, lr}
   b588e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5890:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5894:	b08b      	sub	sp, #44	; 0x2c
   b5896:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5898:	b12b      	cbz	r3, b58a6 <_ZN9TCPClient9availableEv+0x1a>
   b589a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b589e:	429a      	cmp	r2, r3
   b58a0:	d101      	bne.n	b58a6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b58a2:	f7ff ff6f 	bl	b5784 <_ZN9TCPClient12flush_bufferEv>
   b58a6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b58a8:	6808      	ldr	r0, [r1, #0]
   b58aa:	2800      	cmp	r0, #0
   b58ac:	db18      	blt.n	b58e0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b58ae:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b58b2:	2d7f      	cmp	r5, #127	; 0x7f
   b58b4:	d814      	bhi.n	b58e0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b58b6:	3104      	adds	r1, #4
   b58b8:	2308      	movs	r3, #8
   b58ba:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b58be:	4429      	add	r1, r5
   b58c0:	f7ff f910 	bl	b4ae4 <sock_recv>
            if (ret > 0) {
   b58c4:	2800      	cmp	r0, #0
   b58c6:	dd13      	ble.n	b58f0 <_ZN9TCPClient9availableEv+0x64>
   b58c8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b58ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b58ce:	b90a      	cbnz	r2, b58d4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b58d0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b58d4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b58d6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b58da:	4410      	add	r0, r2
   b58dc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b58e0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b58e2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b58e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b58ea:	1ac0      	subs	r0, r0, r3
   b58ec:	b00b      	add	sp, #44	; 0x2c
   b58ee:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b58f0:	f7ff fa04 	bl	b4cfc <__errno>
   b58f4:	6803      	ldr	r3, [r0, #0]
   b58f6:	2b0b      	cmp	r3, #11
   b58f8:	d0f2      	beq.n	b58e0 <_ZN9TCPClient9availableEv+0x54>
   b58fa:	f7ff f9ff 	bl	b4cfc <__errno>
   b58fe:	6803      	ldr	r3, [r0, #0]
   b5900:	2b0b      	cmp	r3, #11
   b5902:	d0ed      	beq.n	b58e0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5904:	2320      	movs	r3, #32
   b5906:	2500      	movs	r5, #0
   b5908:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b590c:	f7ff f9f6 	bl	b4cfc <__errno>
   b5910:	6803      	ldr	r3, [r0, #0]
   b5912:	9301      	str	r3, [sp, #4]
   b5914:	4b08      	ldr	r3, [pc, #32]	; (b5938 <_ZN9TCPClient9availableEv+0xac>)
   b5916:	4909      	ldr	r1, [pc, #36]	; (b593c <_ZN9TCPClient9availableEv+0xb0>)
   b5918:	9300      	str	r3, [sp, #0]
   b591a:	aa02      	add	r2, sp, #8
   b591c:	462b      	mov	r3, r5
   b591e:	2032      	movs	r0, #50	; 0x32
   b5920:	f7ff f930 	bl	b4b84 <log_message>
                    sock_close(d_->sock);
   b5924:	6963      	ldr	r3, [r4, #20]
   b5926:	6818      	ldr	r0, [r3, #0]
   b5928:	f7ff f8cc 	bl	b4ac4 <sock_close>
   b592c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b592e:	f04f 32ff 	mov.w	r2, #4294967295
   b5932:	601a      	str	r2, [r3, #0]
   b5934:	e7d4      	b.n	b58e0 <_ZN9TCPClient9availableEv+0x54>
   b5936:	bf00      	nop
   b5938:	000b6117 	.word	0x000b6117
   b593c:	000b6110 	.word	0x000b6110

000b5940 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5940:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5942:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5944:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5946:	6818      	ldr	r0, [r3, #0]
   b5948:	2800      	cmp	r0, #0
   b594a:	db01      	blt.n	b5950 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b594c:	f7ff f8ba 	bl	b4ac4 <sock_close>
   b5950:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5952:	f04f 32ff 	mov.w	r2, #4294967295
   b5956:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5958:	6960      	ldr	r0, [r4, #20]
   b595a:	2211      	movs	r2, #17
   b595c:	2100      	movs	r1, #0
   b595e:	308c      	adds	r0, #140	; 0x8c
   b5960:	f000 faa4 	bl	b5eac <memset>
    flush_buffer();
   b5964:	4620      	mov	r0, r4
}
   b5966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b596a:	f7ff bf0b 	b.w	b5784 <_ZN9TCPClient12flush_bufferEv>

000b596e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b596e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5970:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5972:	4604      	mov	r4, r0
          total(0) {
   b5974:	6001      	str	r1, [r0, #0]
   b5976:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b597a:	3088      	adds	r0, #136	; 0x88
   b597c:	f7ff fc48 	bl	b5210 <_ZN9IPAddressC1Ev>
}
   b5980:	4620      	mov	r0, r4
   b5982:	bd10      	pop	{r4, pc}

000b5984 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5984:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5986:	2300      	movs	r3, #0
   b5988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b598c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5990:	4a0e      	ldr	r2, [pc, #56]	; (b59cc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5992:	6103      	str	r3, [r0, #16]
   b5994:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5996:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5998:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b599a:	20ac      	movs	r0, #172	; 0xac
   b599c:	9101      	str	r1, [sp, #4]
   b599e:	f7fe fb8a 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b59a2:	1e05      	subs	r5, r0, #0
   b59a4:	f105 060c 	add.w	r6, r5, #12
   b59a8:	d008      	beq.n	b59bc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b59aa:	2301      	movs	r3, #1
   b59ac:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b59b0:	4b07      	ldr	r3, [pc, #28]	; (b59d0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b59b2:	9901      	ldr	r1, [sp, #4]
   b59b4:	602b      	str	r3, [r5, #0]
   b59b6:	4630      	mov	r0, r6
   b59b8:	f7ff ffd9 	bl	b596e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b59bc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b59be:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b59c2:	f7ff fedf 	bl	b5784 <_ZN9TCPClient12flush_bufferEv>
}
   b59c6:	b002      	add	sp, #8
   b59c8:	bd70      	pop	{r4, r5, r6, pc}
   b59ca:	bf00      	nop
   b59cc:	000b614c 	.word	0x000b614c
   b59d0:	000b6130 	.word	0x000b6130

000b59d4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b59d4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b59d6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b59da:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b59dc:	f7ff ffd2 	bl	b5984 <_ZN9TCPClientC1Ei>
}
   b59e0:	4620      	mov	r0, r4
   b59e2:	bd10      	pop	{r4, pc}

000b59e4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b59e4:	b510      	push	{r4, lr}
   b59e6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b59e8:	6800      	ldr	r0, [r0, #0]
   b59ea:	2800      	cmp	r0, #0
   b59ec:	db01      	blt.n	b59f2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b59ee:	f7ff f869 	bl	b4ac4 <sock_close>
    }
}
   b59f2:	4620      	mov	r0, r4
   b59f4:	bd10      	pop	{r4, pc}

000b59f6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b59f6:	300c      	adds	r0, #12
   b59f8:	f7ff bff4 	b.w	b59e4 <_ZN9TCPClient4DataD1Ev>

000b59fc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b59fc:	2200      	movs	r2, #0
   b59fe:	6840      	ldr	r0, [r0, #4]
   b5a00:	4611      	mov	r1, r2
   b5a02:	f7ff b903 	b.w	b4c0c <network_ready>

000b5a06 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5a06:	2200      	movs	r2, #0
   b5a08:	6840      	ldr	r0, [r0, #4]
   b5a0a:	4611      	mov	r1, r2
   b5a0c:	f7ff b91e 	b.w	b4c4c <network_listening>

000b5a10 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5a10:	2200      	movs	r2, #0
   b5a12:	6840      	ldr	r0, [r0, #4]
   b5a14:	4611      	mov	r1, r2
   b5a16:	f7ff b929 	b.w	b4c6c <network_get_listen_timeout>

000b5a1a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5a1a:	6840      	ldr	r0, [r0, #4]
   b5a1c:	2200      	movs	r2, #0
   b5a1e:	f7ff b91d 	b.w	b4c5c <network_set_listen_timeout>

000b5a22 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5a22:	6840      	ldr	r0, [r0, #4]
   b5a24:	2200      	movs	r2, #0
   b5a26:	f081 0101 	eor.w	r1, r1, #1
   b5a2a:	f7ff b907 	b.w	b4c3c <network_listen>

000b5a2e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5a2e:	2300      	movs	r3, #0
   b5a30:	6840      	ldr	r0, [r0, #4]
   b5a32:	461a      	mov	r2, r3
   b5a34:	4619      	mov	r1, r3
   b5a36:	f7ff b8f9 	b.w	b4c2c <network_off>

000b5a3a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5a3a:	2300      	movs	r3, #0
   b5a3c:	6840      	ldr	r0, [r0, #4]
   b5a3e:	461a      	mov	r2, r3
   b5a40:	4619      	mov	r1, r3
   b5a42:	f7ff b8eb 	b.w	b4c1c <network_on>

000b5a46 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5a46:	2200      	movs	r2, #0
   b5a48:	6840      	ldr	r0, [r0, #4]
   b5a4a:	4611      	mov	r1, r2
   b5a4c:	f7ff b8ce 	b.w	b4bec <network_connecting>

000b5a50 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5a50:	6840      	ldr	r0, [r0, #4]
   b5a52:	2200      	movs	r2, #0
   b5a54:	2102      	movs	r1, #2
   b5a56:	f7ff b8d1 	b.w	b4bfc <network_disconnect>

000b5a5a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5a5a:	2300      	movs	r3, #0
   b5a5c:	6840      	ldr	r0, [r0, #4]
   b5a5e:	461a      	mov	r2, r3
   b5a60:	f7ff b8bc 	b.w	b4bdc <network_connect>

000b5a64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5a64:	4b02      	ldr	r3, [pc, #8]	; (b5a70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5a66:	2204      	movs	r2, #4
   b5a68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5a6a:	4a02      	ldr	r2, [pc, #8]	; (b5a74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5a6c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5a6e:	4770      	bx	lr
   b5a70:	2003e730 	.word	0x2003e730
   b5a74:	000b6198 	.word	0x000b6198

000b5a78 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5a78:	2300      	movs	r3, #0
   b5a7a:	6840      	ldr	r0, [r0, #4]
   b5a7c:	461a      	mov	r2, r3
   b5a7e:	f7ff b8ad 	b.w	b4bdc <network_connect>

000b5a82 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5a82:	6840      	ldr	r0, [r0, #4]
   b5a84:	2200      	movs	r2, #0
   b5a86:	2102      	movs	r1, #2
   b5a88:	f7ff b8b8 	b.w	b4bfc <network_disconnect>

000b5a8c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5a8c:	2200      	movs	r2, #0
   b5a8e:	6840      	ldr	r0, [r0, #4]
   b5a90:	4611      	mov	r1, r2
   b5a92:	f7ff b8ab 	b.w	b4bec <network_connecting>

000b5a96 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5a96:	2200      	movs	r2, #0
   b5a98:	6840      	ldr	r0, [r0, #4]
   b5a9a:	4611      	mov	r1, r2
   b5a9c:	f7ff b8b6 	b.w	b4c0c <network_ready>

000b5aa0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5aa0:	2300      	movs	r3, #0
   b5aa2:	6840      	ldr	r0, [r0, #4]
   b5aa4:	461a      	mov	r2, r3
   b5aa6:	4619      	mov	r1, r3
   b5aa8:	f7ff b8b8 	b.w	b4c1c <network_on>

000b5aac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5aac:	2300      	movs	r3, #0
   b5aae:	6840      	ldr	r0, [r0, #4]
   b5ab0:	461a      	mov	r2, r3
   b5ab2:	4619      	mov	r1, r3
   b5ab4:	f7ff b8ba 	b.w	b4c2c <network_off>

000b5ab8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5ab8:	6840      	ldr	r0, [r0, #4]
   b5aba:	2100      	movs	r1, #0
   b5abc:	f7ff b8de 	b.w	b4c7c <network_is_on>

000b5ac0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5ac0:	6840      	ldr	r0, [r0, #4]
   b5ac2:	2100      	movs	r1, #0
   b5ac4:	f7ff b8e2 	b.w	b4c8c <network_is_off>

000b5ac8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5ac8:	6840      	ldr	r0, [r0, #4]
   b5aca:	2200      	movs	r2, #0
   b5acc:	f081 0101 	eor.w	r1, r1, #1
   b5ad0:	f7ff b8b4 	b.w	b4c3c <network_listen>

000b5ad4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5ad4:	6840      	ldr	r0, [r0, #4]
   b5ad6:	2200      	movs	r2, #0
   b5ad8:	f7ff b8c0 	b.w	b4c5c <network_set_listen_timeout>

000b5adc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5adc:	2200      	movs	r2, #0
   b5ade:	6840      	ldr	r0, [r0, #4]
   b5ae0:	4611      	mov	r1, r2
   b5ae2:	f7ff b8c3 	b.w	b4c6c <network_get_listen_timeout>

000b5ae6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5ae6:	2200      	movs	r2, #0
   b5ae8:	6840      	ldr	r0, [r0, #4]
   b5aea:	4611      	mov	r1, r2
   b5aec:	f7ff b8ae 	b.w	b4c4c <network_listening>

000b5af0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5af4:	b095      	sub	sp, #84	; 0x54
   b5af6:	4614      	mov	r4, r2
   b5af8:	460d      	mov	r5, r1
   b5afa:	4607      	mov	r7, r0
    IPAddress addr;
   b5afc:	f7ff fb88 	bl	b5210 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5b00:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5b02:	221c      	movs	r2, #28
   b5b04:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5b06:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5b08:	f000 f9d0 	bl	b5eac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5b0c:	2340      	movs	r3, #64	; 0x40
   b5b0e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5b10:	4620      	mov	r0, r4
   b5b12:	466b      	mov	r3, sp
   b5b14:	aa0c      	add	r2, sp, #48	; 0x30
   b5b16:	2100      	movs	r1, #0
   b5b18:	f7fe ff3c 	bl	b4994 <netdb_getaddrinfo>
    if (!r) {
   b5b1c:	4604      	mov	r4, r0
   b5b1e:	2800      	cmp	r0, #0
   b5b20:	d14b      	bne.n	b5bba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b22:	4602      	mov	r2, r0
   b5b24:	2101      	movs	r1, #1
   b5b26:	6868      	ldr	r0, [r5, #4]
   b5b28:	f7ff f870 	bl	b4c0c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b2c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b2e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b30:	4622      	mov	r2, r4
   b5b32:	6868      	ldr	r0, [r5, #4]
   b5b34:	f7ff f86a 	bl	b4c0c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b38:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b3a:	4681      	mov	r9, r0
        bool ok = false;
   b5b3c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b3e:	2e00      	cmp	r6, #0
   b5b40:	d03b      	beq.n	b5bba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5b42:	2900      	cmp	r1, #0
   b5b44:	d139      	bne.n	b5bba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5b46:	6873      	ldr	r3, [r6, #4]
   b5b48:	2b02      	cmp	r3, #2
   b5b4a:	d003      	beq.n	b5b54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5b4c:	2b0a      	cmp	r3, #10
   b5b4e:	d011      	beq.n	b5b74 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b50:	69f6      	ldr	r6, [r6, #28]
   b5b52:	e7f4      	b.n	b5b3e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5b54:	f1b8 0f00 	cmp.w	r8, #0
   b5b58:	d0fa      	beq.n	b5b50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5b5a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5b5c:	a806      	add	r0, sp, #24
   b5b5e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5b60:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5b62:	f7ff fb99 	bl	b5298 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b68:	1d3c      	adds	r4, r7, #4
   b5b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b6c:	682b      	ldr	r3, [r5, #0]
   b5b6e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b70:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5b72:	e7ed      	b.n	b5b50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5b74:	f1b9 0f00 	cmp.w	r9, #0
   b5b78:	d0ea      	beq.n	b5b50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5b7a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5b7c:	2210      	movs	r2, #16
   b5b7e:	a801      	add	r0, sp, #4
   b5b80:	f000 f994 	bl	b5eac <memset>
                    a.v = 6;
   b5b84:	2306      	movs	r3, #6
   b5b86:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b8a:	ad01      	add	r5, sp, #4
   b5b8c:	f104 0308 	add.w	r3, r4, #8
   b5b90:	3418      	adds	r4, #24
   b5b92:	6818      	ldr	r0, [r3, #0]
   b5b94:	6859      	ldr	r1, [r3, #4]
   b5b96:	462a      	mov	r2, r5
   b5b98:	c203      	stmia	r2!, {r0, r1}
   b5b9a:	3308      	adds	r3, #8
   b5b9c:	42a3      	cmp	r3, r4
   b5b9e:	4615      	mov	r5, r2
   b5ba0:	d1f7      	bne.n	b5b92 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5ba2:	a901      	add	r1, sp, #4
   b5ba4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5ba6:	ad07      	add	r5, sp, #28
   b5ba8:	f7ff fb40 	bl	b522c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bae:	1d3c      	adds	r4, r7, #4
   b5bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5bb2:	682b      	ldr	r3, [r5, #0]
   b5bb4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5bb6:	4649      	mov	r1, r9
   b5bb8:	e7ca      	b.n	b5b50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5bba:	9800      	ldr	r0, [sp, #0]
   b5bbc:	f7fe fee2 	bl	b4984 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5bc0:	4638      	mov	r0, r7
   b5bc2:	b015      	add	sp, #84	; 0x54
   b5bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5bc8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5bc8:	4b02      	ldr	r3, [pc, #8]	; (b5bd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5bca:	4a03      	ldr	r2, [pc, #12]	; (b5bd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5bcc:	601a      	str	r2, [r3, #0]
   b5bce:	2200      	movs	r2, #0
   b5bd0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5bd2:	4770      	bx	lr
   b5bd4:	2003e738 	.word	0x2003e738
   b5bd8:	000b61d4 	.word	0x000b61d4

000b5bdc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bdc:	4770      	bx	lr
	...

000b5be0 <_Z20acquireSerial1Bufferv>:
{
   b5be0:	b538      	push	{r3, r4, r5, lr}
   b5be2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5be4:	2514      	movs	r5, #20
   b5be6:	462a      	mov	r2, r5
   b5be8:	2100      	movs	r1, #0
   b5bea:	f000 f95f 	bl	b5eac <memset>
   b5bee:	8025      	strh	r5, [r4, #0]
   b5bf0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bf2:	4907      	ldr	r1, [pc, #28]	; (b5c10 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5bf4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bf6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5bf8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bfa:	f000 f82f 	bl	b5c5c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bfe:	4904      	ldr	r1, [pc, #16]	; (b5c10 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5c00:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c02:	4628      	mov	r0, r5
   b5c04:	f000 f82a 	bl	b5c5c <_ZnajRKSt9nothrow_t>
    };
   b5c08:	60e0      	str	r0, [r4, #12]
}
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	bd38      	pop	{r3, r4, r5, pc}
   b5c0e:	bf00      	nop
   b5c10:	000b6208 	.word	0x000b6208

000b5c14 <_Z22__fetch_global_Serial1v>:
{
   b5c14:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5c16:	4d0e      	ldr	r5, [pc, #56]	; (b5c50 <_Z22__fetch_global_Serial1v+0x3c>)
   b5c18:	7829      	ldrb	r1, [r5, #0]
   b5c1a:	f3bf 8f5b 	dmb	ish
   b5c1e:	f011 0401 	ands.w	r4, r1, #1
{
   b5c22:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5c24:	d111      	bne.n	b5c4a <_Z22__fetch_global_Serial1v+0x36>
   b5c26:	4628      	mov	r0, r5
   b5c28:	f7fe fa4d 	bl	b40c6 <__cxa_guard_acquire>
   b5c2c:	b168      	cbz	r0, b5c4a <_Z22__fetch_global_Serial1v+0x36>
   b5c2e:	a801      	add	r0, sp, #4
   b5c30:	f7ff ffd6 	bl	b5be0 <_Z20acquireSerial1Bufferv>
   b5c34:	aa01      	add	r2, sp, #4
   b5c36:	4621      	mov	r1, r4
   b5c38:	4806      	ldr	r0, [pc, #24]	; (b5c54 <_Z22__fetch_global_Serial1v+0x40>)
   b5c3a:	f7ff fbff 	bl	b543c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5c3e:	4628      	mov	r0, r5
   b5c40:	f7fe fa46 	bl	b40d0 <__cxa_guard_release>
   b5c44:	4804      	ldr	r0, [pc, #16]	; (b5c58 <_Z22__fetch_global_Serial1v+0x44>)
   b5c46:	f000 f91d 	bl	b5e84 <atexit>
    return serial1;
}
   b5c4a:	4802      	ldr	r0, [pc, #8]	; (b5c54 <_Z22__fetch_global_Serial1v+0x40>)
   b5c4c:	b007      	add	sp, #28
   b5c4e:	bd30      	pop	{r4, r5, pc}
   b5c50:	2003e740 	.word	0x2003e740
   b5c54:	2003e744 	.word	0x2003e744
   b5c58:	000b5bdd 	.word	0x000b5bdd

000b5c5c <_ZnajRKSt9nothrow_t>:
   b5c5c:	f7fe ba2d 	b.w	b40ba <_Znaj>

000b5c60 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5c60:	4901      	ldr	r1, [pc, #4]	; (b5c68 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5c62:	f000 b8f9 	b.w	b5e58 <_ZNKSt9type_infoeqERKS_>
   b5c66:	bf00      	nop
   b5c68:	000b6224 	.word	0x000b6224

000b5c6c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5c6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5c6e:	2400      	movs	r4, #0
   b5c70:	2310      	movs	r3, #16
   b5c72:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5c76:	6803      	ldr	r3, [r0, #0]
   b5c78:	4615      	mov	r5, r2
   b5c7a:	699e      	ldr	r6, [r3, #24]
   b5c7c:	6812      	ldr	r2, [r2, #0]
   b5c7e:	466b      	mov	r3, sp
   b5c80:	e9cd 4400 	strd	r4, r4, [sp]
   b5c84:	47b0      	blx	r6
   b5c86:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5c8a:	f003 0306 	and.w	r3, r3, #6
   b5c8e:	2b06      	cmp	r3, #6
   b5c90:	bf03      	ittte	eq
   b5c92:	9b00      	ldreq	r3, [sp, #0]
   b5c94:	602b      	streq	r3, [r5, #0]
   b5c96:	2001      	moveq	r0, #1
   b5c98:	4620      	movne	r0, r4
   b5c9a:	b004      	add	sp, #16
   b5c9c:	bd70      	pop	{r4, r5, r6, pc}

000b5c9e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5c9e:	9800      	ldr	r0, [sp, #0]
   b5ca0:	4290      	cmp	r0, r2
   b5ca2:	bf14      	ite	ne
   b5ca4:	2001      	movne	r0, #1
   b5ca6:	2006      	moveq	r0, #6
   b5ca8:	4770      	bx	lr
	...

000b5cac <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5cac:	b510      	push	{r4, lr}
   b5cae:	4b03      	ldr	r3, [pc, #12]	; (b5cbc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5cb0:	6003      	str	r3, [r0, #0]
   b5cb2:	4604      	mov	r4, r0
   b5cb4:	f000 f8cd 	bl	b5e52 <_ZNSt9type_infoD1Ev>
   b5cb8:	4620      	mov	r0, r4
   b5cba:	bd10      	pop	{r4, pc}
   b5cbc:	000b6264 	.word	0x000b6264

000b5cc0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5cc0:	b510      	push	{r4, lr}
   b5cc2:	4604      	mov	r4, r0
   b5cc4:	f7ff fff2 	bl	b5cac <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5cc8:	4620      	mov	r0, r4
   b5cca:	2108      	movs	r1, #8
   b5ccc:	f7fe f9f9 	bl	b40c2 <_ZdlPvj>
   b5cd0:	4620      	mov	r0, r4
   b5cd2:	bd10      	pop	{r4, pc}

000b5cd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5cd8:	461f      	mov	r7, r3
   b5cda:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5cde:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5ce2:	4598      	cmp	r8, r3
   b5ce4:	4606      	mov	r6, r0
   b5ce6:	4615      	mov	r5, r2
   b5ce8:	d107      	bne.n	b5cfa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5cea:	9907      	ldr	r1, [sp, #28]
   b5cec:	f000 f8b4 	bl	b5e58 <_ZNKSt9type_infoeqERKS_>
   b5cf0:	b118      	cbz	r0, b5cfa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5cf2:	7165      	strb	r5, [r4, #5]
   b5cf4:	2000      	movs	r0, #0
   b5cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5cfa:	4639      	mov	r1, r7
   b5cfc:	4630      	mov	r0, r6
   b5cfe:	f000 f8ab 	bl	b5e58 <_ZNKSt9type_infoeqERKS_>
   b5d02:	2800      	cmp	r0, #0
   b5d04:	d0f6      	beq.n	b5cf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5d06:	2301      	movs	r3, #1
   b5d08:	f8c4 8000 	str.w	r8, [r4]
   b5d0c:	7125      	strb	r5, [r4, #4]
   b5d0e:	71a3      	strb	r3, [r4, #6]
   b5d10:	e7f0      	b.n	b5cf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5d12 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5d12:	b538      	push	{r3, r4, r5, lr}
   b5d14:	4615      	mov	r5, r2
   b5d16:	461c      	mov	r4, r3
   b5d18:	f000 f89e 	bl	b5e58 <_ZNKSt9type_infoeqERKS_>
   b5d1c:	b120      	cbz	r0, b5d28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5d1e:	2308      	movs	r3, #8
   b5d20:	60e3      	str	r3, [r4, #12]
   b5d22:	2306      	movs	r3, #6
   b5d24:	6025      	str	r5, [r4, #0]
   b5d26:	7123      	strb	r3, [r4, #4]
   b5d28:	bd38      	pop	{r3, r4, r5, pc}

000b5d2a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5d2c:	4605      	mov	r5, r0
   b5d2e:	460c      	mov	r4, r1
   b5d30:	9201      	str	r2, [sp, #4]
   b5d32:	461e      	mov	r6, r3
   b5d34:	f000 f890 	bl	b5e58 <_ZNKSt9type_infoeqERKS_>
   b5d38:	b950      	cbnz	r0, b5d50 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5d3a:	2e03      	cmp	r6, #3
   b5d3c:	d808      	bhi.n	b5d50 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5d3e:	6823      	ldr	r3, [r4, #0]
   b5d40:	9a01      	ldr	r2, [sp, #4]
   b5d42:	695b      	ldr	r3, [r3, #20]
   b5d44:	4629      	mov	r1, r5
   b5d46:	4620      	mov	r0, r4
   b5d48:	b002      	add	sp, #8
   b5d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5d4e:	4718      	bx	r3
   b5d50:	b002      	add	sp, #8
   b5d52:	bd70      	pop	{r4, r5, r6, pc}

000b5d54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b5d54:	b510      	push	{r4, lr}
   b5d56:	4b03      	ldr	r3, [pc, #12]	; (b5d64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b5d58:	6003      	str	r3, [r0, #0]
   b5d5a:	4604      	mov	r4, r0
   b5d5c:	f7ff ffa6 	bl	b5cac <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5d60:	4620      	mov	r0, r4
   b5d62:	bd10      	pop	{r4, pc}
   b5d64:	000b62c4 	.word	0x000b62c4

000b5d68 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b5d68:	b510      	push	{r4, lr}
   b5d6a:	4604      	mov	r4, r0
   b5d6c:	f7ff fff2 	bl	b5d54 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b5d70:	4620      	mov	r0, r4
   b5d72:	210c      	movs	r1, #12
   b5d74:	f7fe f9a5 	bl	b40c2 <_ZdlPvj>
   b5d78:	4620      	mov	r0, r4
   b5d7a:	bd10      	pop	{r4, pc}

000b5d7c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b5d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5d7e:	9f08      	ldr	r7, [sp, #32]
   b5d80:	4297      	cmp	r7, r2
   b5d82:	4605      	mov	r5, r0
   b5d84:	460e      	mov	r6, r1
   b5d86:	4614      	mov	r4, r2
   b5d88:	d00a      	beq.n	b5da0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b5d8a:	68a8      	ldr	r0, [r5, #8]
   b5d8c:	6802      	ldr	r2, [r0, #0]
   b5d8e:	9708      	str	r7, [sp, #32]
   b5d90:	6a15      	ldr	r5, [r2, #32]
   b5d92:	4631      	mov	r1, r6
   b5d94:	4622      	mov	r2, r4
   b5d96:	46ac      	mov	ip, r5
   b5d98:	b003      	add	sp, #12
   b5d9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5d9e:	4760      	bx	ip
   b5da0:	4619      	mov	r1, r3
   b5da2:	9301      	str	r3, [sp, #4]
   b5da4:	f000 f858 	bl	b5e58 <_ZNKSt9type_infoeqERKS_>
   b5da8:	9b01      	ldr	r3, [sp, #4]
   b5daa:	2800      	cmp	r0, #0
   b5dac:	d0ed      	beq.n	b5d8a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b5dae:	2006      	movs	r0, #6
   b5db0:	b003      	add	sp, #12
   b5db2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5db4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b5db4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5db8:	460d      	mov	r5, r1
   b5dba:	4619      	mov	r1, r3
   b5dbc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b5dc0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b5dc4:	4681      	mov	r9, r0
   b5dc6:	4617      	mov	r7, r2
   b5dc8:	4698      	mov	r8, r3
   b5dca:	f000 f845 	bl	b5e58 <_ZNKSt9type_infoeqERKS_>
   b5dce:	b190      	cbz	r0, b5df6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b5dd0:	2d00      	cmp	r5, #0
   b5dd2:	6034      	str	r4, [r6, #0]
   b5dd4:	7137      	strb	r7, [r6, #4]
   b5dd6:	db09      	blt.n	b5dec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b5dd8:	1961      	adds	r1, r4, r5
   b5dda:	458a      	cmp	sl, r1
   b5ddc:	bf0c      	ite	eq
   b5dde:	2106      	moveq	r1, #6
   b5de0:	2101      	movne	r1, #1
   b5de2:	71b1      	strb	r1, [r6, #6]
   b5de4:	2000      	movs	r0, #0
   b5de6:	b001      	add	sp, #4
   b5de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5dec:	3502      	adds	r5, #2
   b5dee:	d1f9      	bne.n	b5de4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5df0:	2301      	movs	r3, #1
   b5df2:	71b3      	strb	r3, [r6, #6]
   b5df4:	e7f6      	b.n	b5de4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5df6:	4554      	cmp	r4, sl
   b5df8:	d106      	bne.n	b5e08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5dfa:	4659      	mov	r1, fp
   b5dfc:	4648      	mov	r0, r9
   b5dfe:	f000 f82b 	bl	b5e58 <_ZNKSt9type_infoeqERKS_>
   b5e02:	b108      	cbz	r0, b5e08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5e04:	7177      	strb	r7, [r6, #5]
   b5e06:	e7ed      	b.n	b5de4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5e08:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b5e0c:	6803      	ldr	r3, [r0, #0]
   b5e0e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b5e12:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b5e16:	69dc      	ldr	r4, [r3, #28]
   b5e18:	463a      	mov	r2, r7
   b5e1a:	4643      	mov	r3, r8
   b5e1c:	4629      	mov	r1, r5
   b5e1e:	46a4      	mov	ip, r4
   b5e20:	b001      	add	sp, #4
   b5e22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e26:	4760      	bx	ip

000b5e28 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b5e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e2c:	4607      	mov	r7, r0
   b5e2e:	460c      	mov	r4, r1
   b5e30:	4615      	mov	r5, r2
   b5e32:	461e      	mov	r6, r3
   b5e34:	f7ff ff6d 	bl	b5d12 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b5e38:	b948      	cbnz	r0, b5e4e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b5e3a:	68b8      	ldr	r0, [r7, #8]
   b5e3c:	6803      	ldr	r3, [r0, #0]
   b5e3e:	699f      	ldr	r7, [r3, #24]
   b5e40:	462a      	mov	r2, r5
   b5e42:	4633      	mov	r3, r6
   b5e44:	4621      	mov	r1, r4
   b5e46:	46bc      	mov	ip, r7
   b5e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5e4c:	4760      	bx	ip
   b5e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5e52 <_ZNSt9type_infoD1Ev>:
   b5e52:	4770      	bx	lr

000b5e54 <_ZNKSt9type_info14__is_pointer_pEv>:
   b5e54:	2000      	movs	r0, #0
   b5e56:	4770      	bx	lr

000b5e58 <_ZNKSt9type_infoeqERKS_>:
   b5e58:	4281      	cmp	r1, r0
   b5e5a:	b508      	push	{r3, lr}
   b5e5c:	d00e      	beq.n	b5e7c <_ZNKSt9type_infoeqERKS_+0x24>
   b5e5e:	6840      	ldr	r0, [r0, #4]
   b5e60:	7803      	ldrb	r3, [r0, #0]
   b5e62:	2b2a      	cmp	r3, #42	; 0x2a
   b5e64:	d00c      	beq.n	b5e80 <_ZNKSt9type_infoeqERKS_+0x28>
   b5e66:	6849      	ldr	r1, [r1, #4]
   b5e68:	780b      	ldrb	r3, [r1, #0]
   b5e6a:	2b2a      	cmp	r3, #42	; 0x2a
   b5e6c:	bf08      	it	eq
   b5e6e:	3101      	addeq	r1, #1
   b5e70:	f7fe f8d4 	bl	b401c <strcmp>
   b5e74:	fab0 f080 	clz	r0, r0
   b5e78:	0940      	lsrs	r0, r0, #5
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	2001      	movs	r0, #1
   b5e7e:	e7fc      	b.n	b5e7a <_ZNKSt9type_infoeqERKS_+0x22>
   b5e80:	2000      	movs	r0, #0
   b5e82:	e7fa      	b.n	b5e7a <_ZNKSt9type_infoeqERKS_+0x22>

000b5e84 <atexit>:
   b5e84:	2300      	movs	r3, #0
   b5e86:	4601      	mov	r1, r0
   b5e88:	461a      	mov	r2, r3
   b5e8a:	4618      	mov	r0, r3
   b5e8c:	f000 b844 	b.w	b5f18 <__register_exitproc>

000b5e90 <memcpy>:
   b5e90:	440a      	add	r2, r1
   b5e92:	4291      	cmp	r1, r2
   b5e94:	f100 33ff 	add.w	r3, r0, #4294967295
   b5e98:	d100      	bne.n	b5e9c <memcpy+0xc>
   b5e9a:	4770      	bx	lr
   b5e9c:	b510      	push	{r4, lr}
   b5e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5ea6:	4291      	cmp	r1, r2
   b5ea8:	d1f9      	bne.n	b5e9e <memcpy+0xe>
   b5eaa:	bd10      	pop	{r4, pc}

000b5eac <memset>:
   b5eac:	4402      	add	r2, r0
   b5eae:	4603      	mov	r3, r0
   b5eb0:	4293      	cmp	r3, r2
   b5eb2:	d100      	bne.n	b5eb6 <memset+0xa>
   b5eb4:	4770      	bx	lr
   b5eb6:	f803 1b01 	strb.w	r1, [r3], #1
   b5eba:	e7f9      	b.n	b5eb0 <memset+0x4>

000b5ebc <srand>:
   b5ebc:	b538      	push	{r3, r4, r5, lr}
   b5ebe:	4b10      	ldr	r3, [pc, #64]	; (b5f00 <srand+0x44>)
   b5ec0:	681d      	ldr	r5, [r3, #0]
   b5ec2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5ec4:	4604      	mov	r4, r0
   b5ec6:	b9b3      	cbnz	r3, b5ef6 <srand+0x3a>
   b5ec8:	2018      	movs	r0, #24
   b5eca:	f7fe fef7 	bl	b4cbc <malloc>
   b5ece:	4602      	mov	r2, r0
   b5ed0:	63a8      	str	r0, [r5, #56]	; 0x38
   b5ed2:	b920      	cbnz	r0, b5ede <srand+0x22>
   b5ed4:	4b0b      	ldr	r3, [pc, #44]	; (b5f04 <srand+0x48>)
   b5ed6:	480c      	ldr	r0, [pc, #48]	; (b5f08 <srand+0x4c>)
   b5ed8:	2142      	movs	r1, #66	; 0x42
   b5eda:	f7fe ff17 	bl	b4d0c <__assert_func>
   b5ede:	490b      	ldr	r1, [pc, #44]	; (b5f0c <srand+0x50>)
   b5ee0:	4b0b      	ldr	r3, [pc, #44]	; (b5f10 <srand+0x54>)
   b5ee2:	e9c0 1300 	strd	r1, r3, [r0]
   b5ee6:	4b0b      	ldr	r3, [pc, #44]	; (b5f14 <srand+0x58>)
   b5ee8:	6083      	str	r3, [r0, #8]
   b5eea:	230b      	movs	r3, #11
   b5eec:	8183      	strh	r3, [r0, #12]
   b5eee:	2100      	movs	r1, #0
   b5ef0:	2001      	movs	r0, #1
   b5ef2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5ef6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5ef8:	2200      	movs	r2, #0
   b5efa:	611c      	str	r4, [r3, #16]
   b5efc:	615a      	str	r2, [r3, #20]
   b5efe:	bd38      	pop	{r3, r4, r5, pc}
   b5f00:	2003e614 	.word	0x2003e614
   b5f04:	000b62fd 	.word	0x000b62fd
   b5f08:	000b6314 	.word	0x000b6314
   b5f0c:	abcd330e 	.word	0xabcd330e
   b5f10:	e66d1234 	.word	0xe66d1234
   b5f14:	0005deec 	.word	0x0005deec

000b5f18 <__register_exitproc>:
   b5f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5f1c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5fd8 <__register_exitproc+0xc0>
   b5f20:	4606      	mov	r6, r0
   b5f22:	f8d8 0000 	ldr.w	r0, [r8]
   b5f26:	461f      	mov	r7, r3
   b5f28:	460d      	mov	r5, r1
   b5f2a:	4691      	mov	r9, r2
   b5f2c:	f000 f856 	bl	b5fdc <__retarget_lock_acquire_recursive>
   b5f30:	4b25      	ldr	r3, [pc, #148]	; (b5fc8 <__register_exitproc+0xb0>)
   b5f32:	681c      	ldr	r4, [r3, #0]
   b5f34:	b934      	cbnz	r4, b5f44 <__register_exitproc+0x2c>
   b5f36:	4c25      	ldr	r4, [pc, #148]	; (b5fcc <__register_exitproc+0xb4>)
   b5f38:	601c      	str	r4, [r3, #0]
   b5f3a:	4b25      	ldr	r3, [pc, #148]	; (b5fd0 <__register_exitproc+0xb8>)
   b5f3c:	b113      	cbz	r3, b5f44 <__register_exitproc+0x2c>
   b5f3e:	681b      	ldr	r3, [r3, #0]
   b5f40:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5f44:	6863      	ldr	r3, [r4, #4]
   b5f46:	2b1f      	cmp	r3, #31
   b5f48:	dd07      	ble.n	b5f5a <__register_exitproc+0x42>
   b5f4a:	f8d8 0000 	ldr.w	r0, [r8]
   b5f4e:	f000 f847 	bl	b5fe0 <__retarget_lock_release_recursive>
   b5f52:	f04f 30ff 	mov.w	r0, #4294967295
   b5f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5f5a:	b34e      	cbz	r6, b5fb0 <__register_exitproc+0x98>
   b5f5c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5f60:	b988      	cbnz	r0, b5f86 <__register_exitproc+0x6e>
   b5f62:	4b1c      	ldr	r3, [pc, #112]	; (b5fd4 <__register_exitproc+0xbc>)
   b5f64:	b923      	cbnz	r3, b5f70 <__register_exitproc+0x58>
   b5f66:	f8d8 0000 	ldr.w	r0, [r8]
   b5f6a:	f000 f838 	bl	b5fde <__retarget_lock_release>
   b5f6e:	e7f0      	b.n	b5f52 <__register_exitproc+0x3a>
   b5f70:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5f74:	f7fe fea2 	bl	b4cbc <malloc>
   b5f78:	2800      	cmp	r0, #0
   b5f7a:	d0f4      	beq.n	b5f66 <__register_exitproc+0x4e>
   b5f7c:	2300      	movs	r3, #0
   b5f7e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5f82:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5f86:	6863      	ldr	r3, [r4, #4]
   b5f88:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5f8c:	2201      	movs	r2, #1
   b5f8e:	409a      	lsls	r2, r3
   b5f90:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5f94:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5f98:	4313      	orrs	r3, r2
   b5f9a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5f9e:	2e02      	cmp	r6, #2
   b5fa0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5fa4:	bf02      	ittt	eq
   b5fa6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5faa:	4313      	orreq	r3, r2
   b5fac:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5fb0:	6863      	ldr	r3, [r4, #4]
   b5fb2:	f8d8 0000 	ldr.w	r0, [r8]
   b5fb6:	1c5a      	adds	r2, r3, #1
   b5fb8:	3302      	adds	r3, #2
   b5fba:	6062      	str	r2, [r4, #4]
   b5fbc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5fc0:	f000 f80e 	bl	b5fe0 <__retarget_lock_release_recursive>
   b5fc4:	2000      	movs	r0, #0
   b5fc6:	e7c6      	b.n	b5f56 <__register_exitproc+0x3e>
   b5fc8:	2003e7e8 	.word	0x2003e7e8
   b5fcc:	2003e75c 	.word	0x2003e75c
   b5fd0:	00000000 	.word	0x00000000
   b5fd4:	000b4cbd 	.word	0x000b4cbd
   b5fd8:	2003e678 	.word	0x2003e678

000b5fdc <__retarget_lock_acquire_recursive>:
   b5fdc:	4770      	bx	lr

000b5fde <__retarget_lock_release>:
   b5fde:	4770      	bx	lr

000b5fe0 <__retarget_lock_release_recursive>:
   b5fe0:	4770      	bx	lr

000b5fe2 <link_code_end>:
	...

000b5fe4 <link_const_data_start>:
   b5fe4:	514d0400 	.word	0x514d0400
   b5fe8:	00045454 	.word	0x00045454
   b5fec:	49514d06 	.word	0x49514d06
   b5ff0:	03706473 	.word	0x03706473

000b5ff4 <dynalib_user>:
   b5ff4:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b6004:	00000000 4c007325 37316261 726f6e2f     ....%s.Lab17/nor
   b6014:	4c006874 37316261 7361652f 6f770074     th.Lab17/east.wo
   b6024:	3f736b72 62616c00 6568742e 2e6c6377     rks?.lab.thewcl.
   b6034:	006d6f63                                com.

000b6038 <_ZTVN5spark13EthernetClassE>:
	...
   b6040:	000b4d8b 000b4d81 000b4d77 000b4d6d     .M...M..wM..mM..
   b6050:	000b4d61 000b4d55 000b5ab9 000b5ac1     aM..UM...Z...Z..
   b6060:	000b4d49 000b4d41 000b4d37 000b4d2d     IM..AM..7M..-M..
   b6070:	000b5af1                                .Z..

000b6074 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b607c:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   b608c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b609c <_ZTV9IPAddress>:
	...
   b60a4:	000b51ad 000b519d 000b519f              .Q...Q...Q..

000b60b0 <_ZTV9USBSerial>:
	...
   b60b8:	000b52bf 000b5327 000b52fd 000b4ee9     .R..'S...R...N..
   b60c8:	000b52ef 000b52c1 000b52d1 000b5321     .R...R...R..!S..
   b60d8:	000b52e1 000b52b9                       .R...R..

000b60e0 <_ZTV11USARTSerial>:
	...
   b60e8:	000b53c1 000b542d 000b5405 000b4ee9     .S..-T...T...N..
   b60f8:	000b53d5 000b53f1 000b53e3 000b53ff     .S...S...S...S..
   b6108:	000b53c3 000b53c7 69726977 7200676e     .S...S..wiring.r
   b6118:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000b6128 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6130:	000b54e9 000b550d 000b59f7 000b551b     .T...U...Y...U..
   b6140:	000b54ed                                .T..

000b6144 <_ZTV9TCPClient>:
	...
   b614c:	000b502d 000b5045 000b5465 000b547f     -P..EP..eT...T..
   b615c:	000b588d 000b54a9 000b5703 000b54dd     .X...T...W...T..
   b616c:	000b5795 000b55d5 000b5731 000b5941     .W...U..1W..AY..
   b617c:	000b56d1 000b54df 000b5491 000b5521     .V...T...T..!U..
   b618c:	000b55b5                                .U..

000b6190 <_ZTVN5spark9WiFiClassE>:
	...
   b6198:	000b5a5b 000b5a51 000b5a47 000b59fd     [Z..QZ..GZ...Y..
   b61a8:	000b5a3b 000b5a2f 000b5ab9 000b5ac1     ;Z../Z...Z...Z..
   b61b8:	000b5a23 000b5a1b 000b5a11 000b5a07     #Z...Z...Z...Z..
   b61c8:	000b5af1                                .Z..

000b61cc <_ZTVN5spark12NetworkClassE>:
	...
   b61d4:	000b5a79 000b5a83 000b5a8d 000b5a97     yZ...Z...Z...Z..
   b61e4:	000b5aa1 000b5aad 000b5ab9 000b5ac1     .Z...Z...Z...Z..
   b61f4:	000b5ac9 000b5ad5 000b5add 000b5ae7     .Z...Z...Z...Z..
   b6204:	000b5af1                                .Z..

000b6208 <_ZSt7nothrow>:
	...

000b6209 <_ZTSSt19_Sp_make_shared_tag>:
   b6209:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b6219:	5f646572 00676174                        red_tag....

000b6224 <_ZTISt19_Sp_make_shared_tag>:
   b6224:	000b6264 000b6209                       db...b..

000b622c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b622c:	000b62c4 000b6238 000b62e8              .b..8b...b..

000b6238 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6238:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b6248:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b6258:	00000045                                E...

000b625c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b625c:	00000000 000b622c 000b5cad 000b5cc1     ....,b...\...\..
   b626c:	000b5e55 000b5e55 000b5d2b 000b5c6d     U^..U^..+]..m\..
   b627c:	000b5d13 000b5cd5 000b5c9f              .]...\...\..

000b6288 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6288:	000b62c4 000b6294 000b622c              .b...b..,b..

000b6294 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6294:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b62a4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b62b4:	456f666e 00000000                       nfoE....

000b62bc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b62bc:	00000000 000b6288 000b5d55 000b5d69     .....b..U]..i]..
   b62cc:	000b5e55 000b5e55 000b5d2b 000b5c6d     U^..U^..+]..m\..
   b62dc:	000b5e29 000b5db5 000b5d7d              )^...]..}]..

000b62e8 <_ZTISt9type_info>:
   b62e8:	000b6264 000b62f0                       db...b..

000b62f0 <_ZTSSt9type_info>:
   b62f0:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b6300:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b6310:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b6320:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b6330:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b6340:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b6350:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b6360:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b6370:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b6380:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b6391 <link_const_data_end>:
   b6391:	00          	.byte	0x00
	...

000b6394 <link_constructors_location>:
   b6394:	000b41ed 	.word	0x000b41ed
   b6398:	000b4d95 	.word	0x000b4d95
   b639c:	000b4da9 	.word	0x000b4da9
   b63a0:	000b4ed9 	.word	0x000b4ed9
   b63a4:	000b5009 	.word	0x000b5009
   b63a8:	000b5019 	.word	0x000b5019
   b63ac:	000b5059 	.word	0x000b5059
   b63b0:	000b5a65 	.word	0x000b5a65
   b63b4:	000b5bc9 	.word	0x000b5bc9
